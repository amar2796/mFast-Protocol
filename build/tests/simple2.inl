// simple2.inl generated by mFAST from FAST Template. 
// Do not modify this file directly. Any modifications 
// will be lost the next time this file is generated.

inline
Test_cref::Test_cref()
  : base_type(nullptr, nullptr)
{
}

template <typename T>inline
Test_cref::Test_cref(
  typename std::enable_if<std::is_same<typename T::cref_type, Test_cref>::value, const mfast::value_storage*>::type storage_array,
  const T* instruction)
  : base_type(storage_array, instruction)
{
}

inline
Test_cref::Test_cref(
  const mfast::message_cref& other)
  : base_type(other)
{
}

inline
Test_cref::Test_cref(
  const mfast::field_cref& other)
  : base_type(mfast::field_cref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
Test_cref::operator mfast::message_cref()
{
  return mfast::message_cref(this->storage(), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void Test_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 0> > ((*this)[0]) );
  {
    ext_cref< group1_cref,  group_type_tag, properties_type< 5> > ext_cref_group((*this)[1]);
    ext_cref_group.set_group_present(this->field_storage(1)->is_present());
    visitor.visit(ext_cref_group);
  }
}

inline
Test_mref::Test_mref()
  : base_type(nullptr, nullptr, nullptr)
{
}

template <typename T>inline
Test_mref::Test_mref(
  mfast::allocator* alloc,
  typename std::enable_if<std::is_same<typename T::cref_type, Test_cref>::value, mfast::value_storage*>::type storage_array,
  const T*          instruction)
  : base_type(alloc, storage_array, instruction)
{
}

inline
Test_mref::Test_mref(
  const mfast::message_mref& other)
  : base_type(other)
{
}

inline
Test_mref::Test_mref(
  const mfast::field_mref_base& other)
  : base_type(other.allocator(),
              mfast::field_mref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
Test_mref::operator mfast::message_mref()
{
  return mfast::message_mref(this->allocator(), const_cast<mfast::value_storage*>(this->storage()), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void Test_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_mref< group1_mref, group_type_tag, properties_type< 5> > ((*this)[1]) );
}

inline
Test::Test(
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
}

inline
Test::Test(
  const Test_cref& other,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data(), other.field_storage(0))
{
}

#ifdef MFAST_JSON_H
Test::Test(
  const char* json_initializer,
  int json_object_tag_mask,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
  std::stringstream strm(json_initializer);
  mfast::json::decode(strm, this->mref(), json_object_tag_mask);
}

#endif
inline Test::cref_type
Test::ref() const
{
  return Test::cref_type(my_storage_.of_group.content_, instruction());
}

inline Test::cref_type
Test::cref() const
{
  return Test::cref_type(my_storage_.of_group.content_, instruction());
}

inline Test::mref_type
Test::ref()
{
  return Test::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline Test::mref_type
Test::mref()
{
  return Test::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline mfast::uint32_cref
Test_cref::get_field1() const
{
  return static_cast<mfast::uint32_cref>((*this)[0]);
}

inline mfast::uint32_cref
Test_cref::try_get_field1() const
{
  return static_cast<mfast::uint32_cref>((*this)[0]);
}

inline mfast::uint32_mref
Test_mref::set_field1() const
{
  return static_cast<mfast::uint32_mref>((*this)[0]);
}


inline Test_cref::group1_cref
Test_cref::get_group1() const
{
  if ((*this)[1].absent())
    return Test_cref::group1_cref(nullptr, Test_cref::group1_cref::instruction_cptr(nullptr));
  return static_cast<Test_cref::group1_cref>((*this)[1]);
}


inline Test_cref::group1_cref
Test_cref::try_get_group1() const
{
  if ((*this)[1].absent())
    throw mfast::bad_optional_access();
  return static_cast<Test_cref::group1_cref>((*this)[1]);
}

inline Test_mref::group1_mref
Test_mref::set_group1() const
{
  this->field_storage(1)->present(true);
  return Test_mref::group1_mref((*this)[1]);
}

inline
void
Test_mref::omit_group1() const
{
  (*this)[1].omit();
}

inline
Test_cref::group1_cref::group1_cref()
  : base_type(nullptr, nullptr)
{
}

template <typename T>inline
Test_cref::group1_cref::group1_cref(
  typename std::enable_if<std::is_same<typename T::cref_type, group1_cref>::value, const mfast::value_storage*>::type storage_array,
  const T* instruction)
  : base_type(storage_array, instruction)
{
}

inline
Test_cref::group1_cref::group1_cref(
  const mfast::field_cref& other)
  : base_type(other)
{
}

template <typename Visitor>
inline void Test_cref::group1_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 0> > ((*this)[1]) );
}

inline
Test_mref::group1_mref::group1_mref()
  : base_type(nullptr, nullptr, nullptr)
{
}

template <typename T>inline
Test_mref::group1_mref::group1_mref(
  mfast::allocator* alloc,
  typename std::enable_if<std::is_same<typename T::cref_type, group1_cref>::value, mfast::value_storage*>::type storage_array,
  const T*          instruction)
  : base_type(alloc, storage_array, instruction)
{
}

inline
Test_mref::group1_mref::group1_mref(
  const mfast::field_mref_base& other)
  : base_type(other)
{
}

template <typename Visitor>
inline void Test_mref::group1_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 0> > ((*this)[1]) );
}

inline mfast::uint32_cref
Test_cref::group1_cref::get_field2() const
{
  return static_cast<mfast::uint32_cref>((*this)[0]);
}

inline mfast::uint32_cref
Test_cref::group1_cref::try_get_field2() const
{
  return static_cast<mfast::uint32_cref>((*this)[0]);
}

inline mfast::uint32_mref
Test_mref::group1_mref::set_field2() const
{
  return static_cast<mfast::uint32_mref>((*this)[0]);
}

inline mfast::uint32_cref
Test_cref::group1_cref::get_field3() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_cref
Test_cref::group1_cref::try_get_field3() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_mref
Test_mref::group1_mref::set_field3() const
{
  return static_cast<mfast::uint32_mref>((*this)[1]);
}

