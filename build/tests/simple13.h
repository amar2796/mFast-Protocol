// simple13.h generated by mFAST from FAST Template. 
// Do not modify this file directly. Any modifications 
// will be lost the next time this file is generated.

#pragma once

#include <mfast.h>
namespace simple13
{

class Test_1_cref
  : public mfast::aggregate_cref
{
  typedef mfast::aggregate_cref base_type;
  public:
    typedef mfast::template_instruction_ex<Test_1_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    Test_1_cref();
    template <typename T>
    Test_1_cref(
      typename std::enable_if<std::is_same<typename T::cref_type, Test_1_cref>::value, const mfast::value_storage*>::type storage,
      const T* instruction);

    Test_1_cref(const mfast::message_cref& other);

    explicit Test_1_cref(const mfast::field_cref& other);

    operator mfast::message_cref();
    template <typename Visitor>
    void accept(Visitor& v);

    mfast::uint32_cref get_field_1_1() const;
    mfast::uint32_cref try_get_field_1_1() const;
    mfast::uint32_cref get_field_1_2() const;
    mfast::uint32_cref try_get_field_1_2() const;

    class group_1_cref
      : public mfast::aggregate_cref
    {
      typedef mfast::aggregate_cref base_type;
      public:
        typedef mfast::group_instruction_ex<group_1_cref> instruction_type;

        typedef const instruction_type* instruction_cptr;
        group_1_cref();
        template <typename T>
        group_1_cref(
          typename std::enable_if<std::is_same<typename T::cref_type, group_1_cref>::value, const mfast::value_storage*>::type storage,
          const T* instruction);

        explicit group_1_cref(const mfast::field_cref& other);

        template <typename Visitor>
        void accept(Visitor& v);

        mfast::ascii_string_cref get_field_1_3() const;
        mfast::ascii_string_cref try_get_field_1_3() const;
        mfast::uint32_cref get_field_1_4() const;
        mfast::uint32_cref try_get_field_1_4() const;
    };

    group_1_cref get_group_1() const;
    group_1_cref try_get_group_1() const;

};


typedef mfast::make_aggregate_mref<Test_1_cref> Test_1_mref_base;
class Test_1_mref
  : public Test_1_mref_base
{
  typedef Test_1_mref_base base_type;
  public:
    typedef mfast::template_instruction_ex<Test_1_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    Test_1_mref();
    template <typename T>
    Test_1_mref(
      mfast::allocator*       alloc,
      typename std::enable_if<std::is_same<typename T::cref_type, Test_1_cref>::value, mfast::value_storage*>::type   storage,
      const T* instruction);

    Test_1_mref(const mfast::message_mref& other);

    operator mfast::message_mref();
    explicit Test_1_mref(const mfast::field_mref_base& other);

    template <typename Visitor>
    void accept(Visitor& v);

    mfast::uint32_mref set_field_1_1() const;
    void omit_field_1_1() const;
    mfast::uint32_mref set_field_1_2() const;

    class group_1_mref
      : public mfast::make_aggregate_mref<Test_1_cref::group_1_cref>
    {
      typedef mfast::make_aggregate_mref<Test_1_cref::group_1_cref> base_type;
      public:
        group_1_mref();
        template <typename T>
        group_1_mref(
          mfast::allocator*       alloc,
          typename std::enable_if<std::is_same<typename T::cref_type, group_1_cref>::value, mfast::value_storage*>::type   storage,
          const T* instruction);

        explicit group_1_mref(const mfast::field_mref_base& other);

        template <typename Visitor>
        void accept(Visitor& v);

        mfast::ascii_string_mref set_field_1_3() const;
        mfast::uint32_mref set_field_1_4() const;
        void omit_field_1_4() const;
    };

    group_1_mref set_group_1() const;
    void omit_group_1() const;
};

class Test_1
  : private mfast::value_storage_array<3>
  , public mfast::message_type
{
  typedef mfast::message_type base_type;
  public:
    enum {
      the_id = 1
    };
    typedef mfast::template_instruction_ex<Test_1_cref> instruction_type;

    typedef mfast::make_message_cref<Test_1_cref, instruction_type> cref_type;
    typedef mfast::make_message_mref<Test_1_mref, instruction_type> mref_type;
    Test_1(
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
    Test_1(
      const Test_1_cref& other,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#ifdef MFAST_JSON_H
    explicit Test_1(
      const char* json_initializer,
      int json_object_tag_mask=0,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#endif // MFAST_JSON_H
    cref_type ref() const;
    cref_type cref() const;
    mref_type ref();
    mref_type mref();
    static const instruction_type* instruction();
  private:
    Test_1(const Test_1&);
    Test_1& operator = (const Test_1&);
};


class Test_2_cref
  : public mfast::aggregate_cref
{
  typedef mfast::aggregate_cref base_type;
  public:
    typedef mfast::template_instruction_ex<Test_2_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    Test_2_cref();
    template <typename T>
    Test_2_cref(
      typename std::enable_if<std::is_same<typename T::cref_type, Test_2_cref>::value, const mfast::value_storage*>::type storage,
      const T* instruction);

    Test_2_cref(const mfast::message_cref& other);

    explicit Test_2_cref(const mfast::field_cref& other);

    operator mfast::message_cref();
    template <typename Visitor>
    void accept(Visitor& v);

    mfast::uint32_cref get_field_2_1() const;
    mfast::uint32_cref try_get_field_2_1() const;

};


typedef mfast::make_aggregate_mref<Test_2_cref> Test_2_mref_base;
class Test_2_mref
  : public Test_2_mref_base
{
  typedef Test_2_mref_base base_type;
  public:
    typedef mfast::template_instruction_ex<Test_2_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    Test_2_mref();
    template <typename T>
    Test_2_mref(
      mfast::allocator*       alloc,
      typename std::enable_if<std::is_same<typename T::cref_type, Test_2_cref>::value, mfast::value_storage*>::type   storage,
      const T* instruction);

    Test_2_mref(const mfast::message_mref& other);

    operator mfast::message_mref();
    explicit Test_2_mref(const mfast::field_mref_base& other);

    template <typename Visitor>
    void accept(Visitor& v);

    mfast::uint32_mref set_field_2_1() const;
    void omit_field_2_1() const;
};

class Test_2
  : private mfast::value_storage_array<1>
  , public mfast::message_type
{
  typedef mfast::message_type base_type;
  public:
    enum {
      the_id = 2
    };
    typedef mfast::template_instruction_ex<Test_2_cref> instruction_type;

    typedef mfast::make_message_cref<Test_2_cref, instruction_type> cref_type;
    typedef mfast::make_message_mref<Test_2_mref, instruction_type> mref_type;
    Test_2(
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
    Test_2(
      const Test_2_cref& other,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#ifdef MFAST_JSON_H
    explicit Test_2(
      const char* json_initializer,
      int json_object_tag_mask=0,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#endif // MFAST_JSON_H
    cref_type ref() const;
    cref_type cref() const;
    mref_type ref();
    mref_type mref();
    static const instruction_type* instruction();
  private:
    Test_2(const Test_2&);
    Test_2& operator = (const Test_2&);
};


class Test_3_cref
  : public mfast::aggregate_cref
{
  typedef mfast::aggregate_cref base_type;
  public:
    typedef mfast::template_instruction_ex<Test_3_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    Test_3_cref();
    template <typename T>
    Test_3_cref(
      typename std::enable_if<std::is_same<typename T::cref_type, Test_3_cref>::value, const mfast::value_storage*>::type storage,
      const T* instruction);

    Test_3_cref(const mfast::message_cref& other);

    explicit Test_3_cref(const mfast::field_cref& other);

    operator mfast::message_cref();
    template <typename Visitor>
    void accept(Visitor& v);

    mfast::uint32_cref get_field_3_1() const;
    mfast::uint32_cref try_get_field_3_1() const;
    mfast::uint32_cref get_field_2_2() const;
    mfast::uint32_cref try_get_field_2_2() const;

    class group_3_1_cref
      : public mfast::aggregate_cref
    {
      typedef mfast::aggregate_cref base_type;
      public:
        typedef mfast::group_instruction_ex<group_3_1_cref> instruction_type;

        typedef const instruction_type* instruction_cptr;
        group_3_1_cref();
        template <typename T>
        group_3_1_cref(
          typename std::enable_if<std::is_same<typename T::cref_type, group_3_1_cref>::value, const mfast::value_storage*>::type storage,
          const T* instruction);

        explicit group_3_1_cref(const mfast::field_cref& other);

        template <typename Visitor>
        void accept(Visitor& v);

        mfast::ascii_string_cref get_field_3_3() const;
        mfast::ascii_string_cref try_get_field_3_3() const;
        mfast::uint32_cref get_field_3_4() const;
        mfast::uint32_cref try_get_field_3_4() const;

        class group_3_2_cref
          : public mfast::aggregate_cref
        {
          typedef mfast::aggregate_cref base_type;
          public:
            typedef mfast::group_instruction_ex<group_3_2_cref> instruction_type;

            typedef const instruction_type* instruction_cptr;
            group_3_2_cref();
            template <typename T>
            group_3_2_cref(
              typename std::enable_if<std::is_same<typename T::cref_type, group_3_2_cref>::value, const mfast::value_storage*>::type storage,
              const T* instruction);

            explicit group_3_2_cref(const mfast::field_cref& other);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::ascii_string_cref get_field_3_5() const;
            mfast::ascii_string_cref try_get_field_3_5() const;
            mfast::uint32_cref get_field_3_6() const;
            mfast::uint32_cref try_get_field_3_6() const;
        };

        group_3_2_cref get_group_3_2() const;
        group_3_2_cref try_get_group_3_2() const;
    };

    group_3_1_cref get_group_3_1() const;
    group_3_1_cref try_get_group_3_1() const;

};


typedef mfast::make_aggregate_mref<Test_3_cref> Test_3_mref_base;
class Test_3_mref
  : public Test_3_mref_base
{
  typedef Test_3_mref_base base_type;
  public:
    typedef mfast::template_instruction_ex<Test_3_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    Test_3_mref();
    template <typename T>
    Test_3_mref(
      mfast::allocator*       alloc,
      typename std::enable_if<std::is_same<typename T::cref_type, Test_3_cref>::value, mfast::value_storage*>::type   storage,
      const T* instruction);

    Test_3_mref(const mfast::message_mref& other);

    operator mfast::message_mref();
    explicit Test_3_mref(const mfast::field_mref_base& other);

    template <typename Visitor>
    void accept(Visitor& v);

    mfast::uint32_mref set_field_3_1() const;
    void omit_field_3_1() const;
    mfast::uint32_mref set_field_2_2() const;

    class group_3_1_mref
      : public mfast::make_aggregate_mref<Test_3_cref::group_3_1_cref>
    {
      typedef mfast::make_aggregate_mref<Test_3_cref::group_3_1_cref> base_type;
      public:
        group_3_1_mref();
        template <typename T>
        group_3_1_mref(
          mfast::allocator*       alloc,
          typename std::enable_if<std::is_same<typename T::cref_type, group_3_1_cref>::value, mfast::value_storage*>::type   storage,
          const T* instruction);

        explicit group_3_1_mref(const mfast::field_mref_base& other);

        template <typename Visitor>
        void accept(Visitor& v);

        mfast::ascii_string_mref set_field_3_3() const;
        mfast::uint32_mref set_field_3_4() const;
        void omit_field_3_4() const;

        class group_3_2_mref
          : public mfast::make_aggregate_mref<Test_3_cref::group_3_1_cref::group_3_2_cref>
        {
          typedef mfast::make_aggregate_mref<Test_3_cref::group_3_1_cref::group_3_2_cref> base_type;
          public:
            group_3_2_mref();
            template <typename T>
            group_3_2_mref(
              mfast::allocator*       alloc,
              typename std::enable_if<std::is_same<typename T::cref_type, group_3_2_cref>::value, mfast::value_storage*>::type   storage,
              const T* instruction);

            explicit group_3_2_mref(const mfast::field_mref_base& other);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::ascii_string_mref set_field_3_5() const;
            mfast::uint32_mref set_field_3_6() const;
            void omit_field_3_6() const;
        };

        group_3_2_mref set_group_3_2() const;
        void omit_group_3_2() const;
    };

    group_3_1_mref set_group_3_1() const;
    void omit_group_3_1() const;
};

class Test_3
  : private mfast::value_storage_array<3>
  , public mfast::message_type
{
  typedef mfast::message_type base_type;
  public:
    enum {
      the_id = 3
    };
    typedef mfast::template_instruction_ex<Test_3_cref> instruction_type;

    typedef mfast::make_message_cref<Test_3_cref, instruction_type> cref_type;
    typedef mfast::make_message_mref<Test_3_mref, instruction_type> mref_type;
    Test_3(
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
    Test_3(
      const Test_3_cref& other,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#ifdef MFAST_JSON_H
    explicit Test_3(
      const char* json_initializer,
      int json_object_tag_mask=0,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#endif // MFAST_JSON_H
    cref_type ref() const;
    cref_type cref() const;
    mref_type ref();
    mref_type mref();
    static const instruction_type* instruction();
  private:
    Test_3(const Test_3&);
    Test_3& operator = (const Test_3&);
};


class Test_4_cref
  : public mfast::aggregate_cref
{
  typedef mfast::aggregate_cref base_type;
  public:
    typedef mfast::template_instruction_ex<Test_4_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    Test_4_cref();
    template <typename T>
    Test_4_cref(
      typename std::enable_if<std::is_same<typename T::cref_type, Test_4_cref>::value, const mfast::value_storage*>::type storage,
      const T* instruction);

    Test_4_cref(const mfast::message_cref& other);

    explicit Test_4_cref(const mfast::field_cref& other);

    operator mfast::message_cref();
    template <typename Visitor>
    void accept(Visitor& v);


    class group_4_1_cref
      : public mfast::aggregate_cref
    {
      typedef mfast::aggregate_cref base_type;
      public:
        typedef mfast::group_instruction_ex<group_4_1_cref> instruction_type;

        typedef const instruction_type* instruction_cptr;
        group_4_1_cref();
        template <typename T>
        group_4_1_cref(
          typename std::enable_if<std::is_same<typename T::cref_type, group_4_1_cref>::value, const mfast::value_storage*>::type storage,
          const T* instruction);

        explicit group_4_1_cref(const mfast::field_cref& other);

        template <typename Visitor>
        void accept(Visitor& v);


        class sequence_4_element_cref
          : public mfast::sequence_element_cref
        {
          typedef mfast::sequence_element_cref base_type;
          public:
            typedef mfast::sequence_instruction_ex<sequence_4_element_cref> instruction_type;
            typedef const instruction_type* instruction_cptr;
            sequence_4_element_cref(
              const mfast::value_storage* storage,
              instruction_cptr            instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::uint32_cref get_field_4_2() const;
            mfast::uint32_cref try_get_field_4_2() const;
            mfast::uint32_cref get_field_4_3() const;
            mfast::uint32_cref try_get_field_4_3() const;
        };

        typedef mfast::make_sequence_cref<sequence_4_element_cref> sequence_4_cref;
        sequence_4_cref get_sequence_4() const;
        sequence_4_cref try_get_sequence_4() const;
        mfast::uint32_cref get_field_4_4() const;
        mfast::uint32_cref try_get_field_4_4() const;
    };

    group_4_1_cref get_group_4_1() const;
    group_4_1_cref try_get_group_4_1() const;

};


typedef mfast::make_aggregate_mref<Test_4_cref> Test_4_mref_base;
class Test_4_mref
  : public Test_4_mref_base
{
  typedef Test_4_mref_base base_type;
  public:
    typedef mfast::template_instruction_ex<Test_4_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    Test_4_mref();
    template <typename T>
    Test_4_mref(
      mfast::allocator*       alloc,
      typename std::enable_if<std::is_same<typename T::cref_type, Test_4_cref>::value, mfast::value_storage*>::type   storage,
      const T* instruction);

    Test_4_mref(const mfast::message_mref& other);

    operator mfast::message_mref();
    explicit Test_4_mref(const mfast::field_mref_base& other);

    template <typename Visitor>
    void accept(Visitor& v);


    class group_4_1_mref
      : public mfast::make_aggregate_mref<Test_4_cref::group_4_1_cref>
    {
      typedef mfast::make_aggregate_mref<Test_4_cref::group_4_1_cref> base_type;
      public:
        group_4_1_mref();
        template <typename T>
        group_4_1_mref(
          mfast::allocator*       alloc,
          typename std::enable_if<std::is_same<typename T::cref_type, group_4_1_cref>::value, mfast::value_storage*>::type   storage,
          const T* instruction);

        explicit group_4_1_mref(const mfast::field_mref_base& other);

        template <typename Visitor>
        void accept(Visitor& v);


        class sequence_4_element_mref
          : public mfast::make_aggregate_mref<Test_4_cref::group_4_1_cref::sequence_4_element_cref>
        {
          typedef mfast::make_aggregate_mref<Test_4_cref::group_4_1_cref::sequence_4_element_cref> base_type;
          public:
            sequence_4_element_mref(
              mfast::allocator*     alloc,
              mfast::value_storage* storage,
              instruction_cptr      instruction);

            template <typename Visitor>
            void accept(Visitor& v);

            mfast::uint32_mref set_field_4_3() const;
        };

        typedef mfast::make_sequence_mref<sequence_4_element_mref> sequence_4_mref;
        sequence_4_mref set_sequence_4() const;
        mfast::uint32_mref set_field_4_4() const;
        void omit_field_4_4() const;
    };

    group_4_1_mref set_group_4_1() const;
    void omit_group_4_1() const;
};

class Test_4
  : private mfast::value_storage_array<1>
  , public mfast::message_type
{
  typedef mfast::message_type base_type;
  public:
    enum {
      the_id = 4
    };
    typedef mfast::template_instruction_ex<Test_4_cref> instruction_type;

    typedef mfast::make_message_cref<Test_4_cref, instruction_type> cref_type;
    typedef mfast::make_message_mref<Test_4_mref, instruction_type> mref_type;
    Test_4(
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
    Test_4(
      const Test_4_cref& other,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#ifdef MFAST_JSON_H
    explicit Test_4(
      const char* json_initializer,
      int json_object_tag_mask=0,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#endif // MFAST_JSON_H
    cref_type ref() const;
    cref_type cref() const;
    mref_type ref();
    mref_type mref();
    static const instruction_type* instruction();
  private:
    Test_4(const Test_4&);
    Test_4& operator = (const Test_4&);
};


struct  templates_description
  : mfast::templates_description
{
  typedef std::tuple<Test_1,
                       Test_2,
                       Test_3,
                       Test_4> types;
  templates_description();
  static const templates_description* instance();
};

inline const templates_description* description()
{
  return templates_description::instance();
}

#include "simple13.inl"
}
