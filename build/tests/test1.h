// test1.h generated by mFAST from FAST Template. 
// Do not modify this file directly. Any modifications 
// will be lost the next time this file is generated.

#pragma once

#include <mfast.h>
namespace test1
{

class SampleInfo_cref
  : public mfast::aggregate_cref
{
  typedef mfast::aggregate_cref base_type;
  public:
    typedef mfast::template_instruction_ex<SampleInfo_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    SampleInfo_cref();
    template <typename T>
    SampleInfo_cref(
      typename std::enable_if<std::is_same<typename T::cref_type, SampleInfo_cref>::value, const mfast::value_storage*>::type storage,
      const T* instruction);

    SampleInfo_cref(const mfast::message_cref& other);

    explicit SampleInfo_cref(const mfast::field_cref& other);

    operator mfast::message_cref();
    template <typename Visitor>
    void accept(Visitor& v);

    mfast::ascii_string_cref get_MessageType() const;
    mfast::ascii_string_cref try_get_MessageType() const;
    mfast::ascii_string_cref get_BeginString() const;
    mfast::ascii_string_cref try_get_BeginString() const;
    mfast::ascii_string_cref get_SenderCompID() const;
    mfast::ascii_string_cref try_get_SenderCompID() const;
    mfast::uint32_cref get_MsgSeqNum() const;
    mfast::uint32_cref try_get_MsgSeqNum() const;

};


typedef mfast::make_aggregate_mref<SampleInfo_cref> SampleInfo_mref_base;
class SampleInfo_mref
  : public SampleInfo_mref_base
{
  typedef SampleInfo_mref_base base_type;
  public:
    typedef mfast::template_instruction_ex<SampleInfo_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    SampleInfo_mref();
    template <typename T>
    SampleInfo_mref(
      mfast::allocator*       alloc,
      typename std::enable_if<std::is_same<typename T::cref_type, SampleInfo_cref>::value, mfast::value_storage*>::type   storage,
      const T* instruction);

    SampleInfo_mref(const mfast::message_mref& other);

    operator mfast::message_mref();
    explicit SampleInfo_mref(const mfast::field_mref_base& other);

    template <typename Visitor>
    void accept(Visitor& v);

    mfast::ascii_string_mref set_SenderCompID() const;
    mfast::uint32_mref set_MsgSeqNum() const;
};

class SampleInfo
  : private mfast::value_storage_array<4>
  , public mfast::message_type
{
  typedef mfast::message_type base_type;
  public:
    enum {
      the_id = 1
    };
    typedef mfast::template_instruction_ex<SampleInfo_cref> instruction_type;

    typedef mfast::make_message_cref<SampleInfo_cref, instruction_type> cref_type;
    typedef mfast::make_message_mref<SampleInfo_mref, instruction_type> mref_type;
    SampleInfo(
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
    SampleInfo(
      const SampleInfo_cref& other,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#ifdef MFAST_JSON_H
    explicit SampleInfo(
      const char* json_initializer,
      int json_object_tag_mask=0,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#endif // MFAST_JSON_H
    cref_type ref() const;
    cref_type cref() const;
    mref_type ref();
    mref_type mref();
    static const instruction_type* instruction();
  private:
    SampleInfo(const SampleInfo&);
    SampleInfo& operator = (const SampleInfo&);
};


struct  templates_description
  : mfast::templates_description
{
  typedef std::tuple<SampleInfo> types;
  templates_description();
  static const templates_description* instance();
};

inline const templates_description* description()
{
  return templates_description::instance();
}

#include "test1.inl"
}
