// simple15.h generated by mFAST from FAST Template. 
// Do not modify this file directly. Any modifications 
// will be lost the next time this file is generated.

#pragma once

#include <mfast.h>
namespace simple15
{

class Test_1_cref
  : public mfast::aggregate_cref
{
  typedef mfast::aggregate_cref base_type;
  public:
    typedef mfast::template_instruction_ex<Test_1_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    Test_1_cref();
    template <typename T>
    Test_1_cref(
      typename std::enable_if<std::is_same<typename T::cref_type, Test_1_cref>::value, const mfast::value_storage*>::type storage,
      const T* instruction);

    Test_1_cref(const mfast::message_cref& other);

    explicit Test_1_cref(const mfast::field_cref& other);

    operator mfast::message_cref();
    template <typename Visitor>
    void accept(Visitor& v);

    mfast::uint32_cref get_field_1_1() const;
    mfast::uint32_cref try_get_field_1_1() const;
    mfast::uint32_cref get_field_1_2() const;
    mfast::uint32_cref try_get_field_1_2() const;
    mfast::uint32_cref get_field_1_3() const;
    mfast::uint32_cref try_get_field_1_3() const;
    mfast::uint32_cref get_field_1_4() const;
    mfast::uint32_cref try_get_field_1_4() const;
    mfast::uint32_cref get_field_1_5() const;
    mfast::uint32_cref try_get_field_1_5() const;
    mfast::uint32_cref get_field_1_6() const;
    mfast::uint32_cref try_get_field_1_6() const;
    mfast::uint32_cref get_field_1_7() const;
    mfast::uint32_cref try_get_field_1_7() const;

};


typedef mfast::make_aggregate_mref<Test_1_cref> Test_1_mref_base;
class Test_1_mref
  : public Test_1_mref_base
{
  typedef Test_1_mref_base base_type;
  public:
    typedef mfast::template_instruction_ex<Test_1_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    Test_1_mref();
    template <typename T>
    Test_1_mref(
      mfast::allocator*       alloc,
      typename std::enable_if<std::is_same<typename T::cref_type, Test_1_cref>::value, mfast::value_storage*>::type   storage,
      const T* instruction);

    Test_1_mref(const mfast::message_mref& other);

    operator mfast::message_mref();
    explicit Test_1_mref(const mfast::field_mref_base& other);

    template <typename Visitor>
    void accept(Visitor& v);

    mfast::uint32_mref set_field_1_1() const;
    void omit_field_1_1() const;
    mfast::uint32_mref set_field_1_2() const;
    void omit_field_1_2() const;
    mfast::uint32_mref set_field_1_3() const;
    void omit_field_1_3() const;
    mfast::uint32_mref set_field_1_4() const;
    void omit_field_1_4() const;
    mfast::uint32_mref set_field_1_5() const;
    void omit_field_1_5() const;
    mfast::uint32_mref set_field_1_6() const;
    void omit_field_1_6() const;
    mfast::uint32_mref set_field_1_7() const;
    void omit_field_1_7() const;
};

class Test_1
  : private mfast::value_storage_array<7>
  , public mfast::message_type
{
  typedef mfast::message_type base_type;
  public:
    enum {
      the_id = 1
    };
    typedef mfast::template_instruction_ex<Test_1_cref> instruction_type;

    typedef mfast::make_message_cref<Test_1_cref, instruction_type> cref_type;
    typedef mfast::make_message_mref<Test_1_mref, instruction_type> mref_type;
    Test_1(
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
    Test_1(
      const Test_1_cref& other,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#ifdef MFAST_JSON_H
    explicit Test_1(
      const char* json_initializer,
      int json_object_tag_mask=0,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#endif // MFAST_JSON_H
    cref_type ref() const;
    cref_type cref() const;
    mref_type ref();
    mref_type mref();
    static const instruction_type* instruction();
  private:
    Test_1(const Test_1&);
    Test_1& operator = (const Test_1&);
};


struct  templates_description
  : mfast::templates_description
{
  typedef std::tuple<Test_1> types;
  templates_description();
  static const templates_description* instance();
};

inline const templates_description* description()
{
  return templates_description::instance();
}

#include "simple15.inl"
}
