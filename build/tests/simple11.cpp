// simple11.cpp generated by mFAST from FAST Template. 
// Do not modify this file directly. Any modifications 
// will be lost the next time this file is generated.

#include "simple11.h"

using namespace mfast;

namespace simple11
{
const Test_1::instruction_type*
Test_1::instruction()
{
  const static Test_1::instruction_type* ptr_instruction;
  if (ptr_instruction) return ptr_instruction;
const static uint32_field_instruction
Test_1__field1_instruction(
  operator_copy,
  presence_mandatory,
  11, // id
  "field1", // name
  "", // ns
  nullptr,  // opContext
  int_value_storage<uint32_t>(), // initial_value
  mfast::instruction_tag(0)); // tag

const static uint32_field_instruction
Test_1__field2_instruction(
  operator_copy,
  presence_mandatory,
  12, // id
  "field2", // name
  "", // ns
  nullptr,  // opContext
  int_value_storage<uint32_t>(), // initial_value
  mfast::instruction_tag(0)); // tag

const static uint32_field_instruction
Test_1__field3_instruction(
  operator_copy,
  presence_mandatory,
  13, // id
  "field3", // name
  "", // ns
  nullptr,  // opContext
  int_value_storage<uint32_t>(), // initial_value
  mfast::instruction_tag(0)); // tag

const static field_instruction* Test_1__subinstructions[] = {
  &Test_1__field1_instruction,
  &Test_1__field2_instruction,
  &Test_1__field3_instruction,
};

  const static Test_1::instruction_type the_instruction(
    1, // id
    "Test_1", // name
    "", // ns
    "", // templateNs
    "", // dictionary
    Test_1__subinstructions,
    0, // reset
  "", // typeRef name 
  "", // typeRef ns 
  "", // cpp_ns
  mfast::instruction_tag(0)); // tag 

  ptr_instruction = &the_instruction;
  return ptr_instruction;
}

const Test_2::instruction_type*
Test_2::instruction()
{
  const static Test_2::instruction_type* ptr_instruction;
  if (ptr_instruction) return ptr_instruction;
const static uint32_field_instruction
Test_2__field4_instruction(
  operator_copy,
  presence_mandatory,
  21, // id
  "field4", // name
  "", // ns
  nullptr,  // opContext
  int_value_storage<uint32_t>(), // initial_value
  mfast::instruction_tag(0)); // tag

const static uint32_field_instruction
Test_2__field5_instruction(
  operator_copy,
  presence_mandatory,
  22, // id
  "field5", // name
  "", // ns
  nullptr,  // opContext
  int_value_storage<uint32_t>(), // initial_value
  mfast::instruction_tag(0)); // tag

const static uint32_field_instruction
Test_2__field6_instruction(
  operator_copy,
  presence_mandatory,
  23, // id
  "field6", // name
  "", // ns
  nullptr,  // opContext
  int_value_storage<uint32_t>(), // initial_value
  mfast::instruction_tag(0)); // tag

const static field_instruction* Test_2__subinstructions[] = {
  &Test_2__field4_instruction,
  &Test_2__field5_instruction,
  &Test_2__field6_instruction,
};

  const static Test_2::instruction_type the_instruction(
    2, // id
    "Test_2", // name
    "", // ns
    "", // templateNs
    "", // dictionary
    Test_2__subinstructions,
    0, // reset
  "", // typeRef name 
  "", // typeRef ns 
  "", // cpp_ns
  mfast::instruction_tag(0)); // tag 

  ptr_instruction = &the_instruction;
  return ptr_instruction;
}

const template_instruction* simple11_templates_instructions[] ={
  Test_1::instruction(),
  Test_2::instruction()};

templates_description::templates_description()
  : mfast::templates_description(
    "http://www.fixprotocol.org/ns/fix", // ns
    "http://www.fixprotocol.org/ns/templates/sample", // templateNs
    "", // dictionary
    simple11_templates_instructions)
{
}

const templates_description* templates_description::instance()
{
  static const templates_description inst;
  return &inst;
}

}
