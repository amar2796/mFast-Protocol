// simple3.h generated by mFAST from FAST Template. 
// Do not modify this file directly. Any modifications 
// will be lost the next time this file is generated.

#pragma once

#include <mfast.h>
namespace simple3
{

class Test_cref
  : public mfast::aggregate_cref
{
  typedef mfast::aggregate_cref base_type;
  public:
    typedef mfast::template_instruction_ex<Test_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    Test_cref();
    template <typename T>
    Test_cref(
      typename std::enable_if<std::is_same<typename T::cref_type, Test_cref>::value, const mfast::value_storage*>::type storage,
      const T* instruction);

    Test_cref(const mfast::message_cref& other);

    explicit Test_cref(const mfast::field_cref& other);

    operator mfast::message_cref();
    template <typename Visitor>
    void accept(Visitor& v);

    mfast::uint32_cref get_field1() const;
    mfast::uint32_cref try_get_field1() const;

    class sequence1_element_cref
      : public mfast::sequence_element_cref
    {
      typedef mfast::sequence_element_cref base_type;
      public:
        typedef mfast::sequence_instruction_ex<sequence1_element_cref> instruction_type;
        typedef const instruction_type* instruction_cptr;
        sequence1_element_cref(
          const mfast::value_storage* storage,
          instruction_cptr            instruction);

        template <typename Visitor>
        void accept(Visitor& v);

        mfast::uint32_cref get_field2() const;
        mfast::uint32_cref try_get_field2() const;
        mfast::uint32_cref get_field3() const;
        mfast::uint32_cref try_get_field3() const;
    };

    typedef mfast::make_sequence_cref<sequence1_element_cref> sequence1_cref;
    sequence1_cref get_sequence1() const;
    sequence1_cref try_get_sequence1() const;

};


typedef mfast::make_aggregate_mref<Test_cref> Test_mref_base;
class Test_mref
  : public Test_mref_base
{
  typedef Test_mref_base base_type;
  public:
    typedef mfast::template_instruction_ex<Test_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    Test_mref();
    template <typename T>
    Test_mref(
      mfast::allocator*       alloc,
      typename std::enable_if<std::is_same<typename T::cref_type, Test_cref>::value, mfast::value_storage*>::type   storage,
      const T* instruction);

    Test_mref(const mfast::message_mref& other);

    operator mfast::message_mref();
    explicit Test_mref(const mfast::field_mref_base& other);

    template <typename Visitor>
    void accept(Visitor& v);

    mfast::uint32_mref set_field1() const;

    class sequence1_element_mref
      : public mfast::make_aggregate_mref<Test_cref::sequence1_element_cref>
    {
      typedef mfast::make_aggregate_mref<Test_cref::sequence1_element_cref> base_type;
      public:
        sequence1_element_mref(
          mfast::allocator*     alloc,
          mfast::value_storage* storage,
          instruction_cptr      instruction);

        template <typename Visitor>
        void accept(Visitor& v);

        mfast::uint32_mref set_field2() const;
        mfast::uint32_mref set_field3() const;
    };

    typedef mfast::make_sequence_mref<sequence1_element_mref> sequence1_mref;
    sequence1_mref set_sequence1() const;
    void omit_sequence1() const;
};

class Test
  : private mfast::value_storage_array<2>
  , public mfast::message_type
{
  typedef mfast::message_type base_type;
  public:
    enum {
      the_id = 1
    };
    typedef mfast::template_instruction_ex<Test_cref> instruction_type;

    typedef mfast::make_message_cref<Test_cref, instruction_type> cref_type;
    typedef mfast::make_message_mref<Test_mref, instruction_type> mref_type;
    Test(
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
    Test(
      const Test_cref& other,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#ifdef MFAST_JSON_H
    explicit Test(
      const char* json_initializer,
      int json_object_tag_mask=0,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#endif // MFAST_JSON_H
    cref_type ref() const;
    cref_type cref() const;
    mref_type ref();
    mref_type mref();
    static const instruction_type* instruction();
  private:
    Test(const Test&);
    Test& operator = (const Test&);
};


struct  templates_description
  : mfast::templates_description
{
  typedef std::tuple<Test> types;
  templates_description();
  static const templates_description* instance();
};

inline const templates_description* description()
{
  return templates_description::instance();
}

#include "simple3.inl"
}
