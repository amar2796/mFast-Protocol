// simple13.cpp generated by mFAST from FAST Template. 
// Do not modify this file directly. Any modifications 
// will be lost the next time this file is generated.

#include "simple13.h"

using namespace mfast;

namespace simple13
{
const Test_1::instruction_type*
Test_1::instruction()
{
  const static Test_1::instruction_type* ptr_instruction;
  if (ptr_instruction) return ptr_instruction;
const static uint32_field_instruction
Test_1__field_1_1_instruction(
  operator_none,
  presence_optional,
  11, // id
  "field_1_1", // name
  "", // ns
  nullptr,  // opContext
  int_value_storage<uint32_t>(), // initial_value
  mfast::instruction_tag(0)); // tag

const static uint32_field_instruction
Test_1__field_1_2_instruction(
  operator_none,
  presence_mandatory,
  12, // id
  "field_1_2", // name
  "", // ns
  nullptr,  // opContext
  int_value_storage<uint32_t>(), // initial_value
  mfast::instruction_tag(0)); // tag

const static ascii_field_instruction
Test_1__group_1__field_1_3_instruction(
  operator_default,
  presence_mandatory,
  13, // id
  "field_1_3", // name
  "", // ns
  nullptr,  // opContext
  string_value_storage("test",4), // initial_value
  mfast::instruction_tag(0)); // tag

const static uint32_field_instruction
Test_1__group_1__field_1_4_instruction(
  operator_none,
  presence_optional,
  14, // id
  "field_1_4", // name
  "", // ns
  nullptr,  // opContext
  int_value_storage<uint32_t>(), // initial_value
  mfast::instruction_tag(0)); // tag

const static field_instruction* Test_1__group_1__subinstructions[] = {
  &Test_1__group_1__field_1_3_instruction,
  &Test_1__group_1__field_1_4_instruction,
};

const static Test_1_cref::group_1_cref::instruction_type
Test_1__group_1_instruction(
  presence_optional,
  0, // id
  "group_1", // name
  "", // ns
  "", // dictionary
  Test_1__group_1__subinstructions,
  "", // typeRef name 
  "", // typeRef ns 
  "", // cpp_ns
  mfast::instruction_tag(0)); // tag

const static field_instruction* Test_1__subinstructions[] = {
  &Test_1__field_1_1_instruction,
  &Test_1__field_1_2_instruction,
  &Test_1__group_1_instruction,
};

  const static Test_1::instruction_type the_instruction(
    1, // id
    "Test_1", // name
    "", // ns
    "", // templateNs
    "", // dictionary
    Test_1__subinstructions,
    0, // reset
  "", // typeRef name 
  "", // typeRef ns 
  "", // cpp_ns
  mfast::instruction_tag(0)); // tag 

  ptr_instruction = &the_instruction;
  return ptr_instruction;
}

const Test_2::instruction_type*
Test_2::instruction()
{
  const static Test_2::instruction_type* ptr_instruction;
  if (ptr_instruction) return ptr_instruction;
const static uint32_field_instruction
Test_2__field_2_1_instruction(
  operator_none,
  presence_optional,
  21, // id
  "field_2_1", // name
  "", // ns
  nullptr,  // opContext
  int_value_storage<uint32_t>(), // initial_value
  mfast::instruction_tag(0)); // tag

const static field_instruction* Test_2__subinstructions[] = {
  &Test_2__field_2_1_instruction,
};

  const static Test_2::instruction_type the_instruction(
    2, // id
    "Test_2", // name
    "", // ns
    "", // templateNs
    "", // dictionary
    Test_2__subinstructions,
    0, // reset
  "", // typeRef name 
  "", // typeRef ns 
  "", // cpp_ns
  mfast::instruction_tag(0)); // tag 

  ptr_instruction = &the_instruction;
  return ptr_instruction;
}

const Test_3::instruction_type*
Test_3::instruction()
{
  const static Test_3::instruction_type* ptr_instruction;
  if (ptr_instruction) return ptr_instruction;
const static uint32_field_instruction
Test_3__field_3_1_instruction(
  operator_none,
  presence_optional,
  31, // id
  "field_3_1", // name
  "", // ns
  nullptr,  // opContext
  int_value_storage<uint32_t>(), // initial_value
  mfast::instruction_tag(0)); // tag

const static uint32_field_instruction
Test_3__field_2_2_instruction(
  operator_none,
  presence_mandatory,
  32, // id
  "field_2_2", // name
  "", // ns
  nullptr,  // opContext
  int_value_storage<uint32_t>(), // initial_value
  mfast::instruction_tag(0)); // tag

const static ascii_field_instruction
Test_3__group_3_1__field_3_3_instruction(
  operator_default,
  presence_mandatory,
  33, // id
  "field_3_3", // name
  "", // ns
  nullptr,  // opContext
  string_value_storage("test",4), // initial_value
  mfast::instruction_tag(0)); // tag

const static uint32_field_instruction
Test_3__group_3_1__field_3_4_instruction(
  operator_none,
  presence_optional,
  34, // id
  "field_3_4", // name
  "", // ns
  nullptr,  // opContext
  int_value_storage<uint32_t>(), // initial_value
  mfast::instruction_tag(0)); // tag

const static ascii_field_instruction
Test_3__group_3_1__group_3_2__field_3_5_instruction(
  operator_default,
  presence_mandatory,
  35, // id
  "field_3_5", // name
  "", // ns
  nullptr,  // opContext
  string_value_storage("test",4), // initial_value
  mfast::instruction_tag(0)); // tag

const static uint32_field_instruction
Test_3__group_3_1__group_3_2__field_3_6_instruction(
  operator_none,
  presence_optional,
  36, // id
  "field_3_6", // name
  "", // ns
  nullptr,  // opContext
  int_value_storage<uint32_t>(), // initial_value
  mfast::instruction_tag(0)); // tag

const static field_instruction* Test_3__group_3_1__group_3_2__subinstructions[] = {
  &Test_3__group_3_1__group_3_2__field_3_5_instruction,
  &Test_3__group_3_1__group_3_2__field_3_6_instruction,
};

const static Test_3_cref::group_3_1_cref::group_3_2_cref::instruction_type
Test_3__group_3_1__group_3_2_instruction(
  presence_optional,
  0, // id
  "group_3_2", // name
  "", // ns
  "", // dictionary
  Test_3__group_3_1__group_3_2__subinstructions,
  "", // typeRef name 
  "", // typeRef ns 
  "", // cpp_ns
  mfast::instruction_tag(0)); // tag

const static field_instruction* Test_3__group_3_1__subinstructions[] = {
  &Test_3__group_3_1__field_3_3_instruction,
  &Test_3__group_3_1__field_3_4_instruction,
  &Test_3__group_3_1__group_3_2_instruction,
};

const static Test_3_cref::group_3_1_cref::instruction_type
Test_3__group_3_1_instruction(
  presence_optional,
  0, // id
  "group_3_1", // name
  "", // ns
  "", // dictionary
  Test_3__group_3_1__subinstructions,
  "", // typeRef name 
  "", // typeRef ns 
  "", // cpp_ns
  mfast::instruction_tag(0)); // tag

const static field_instruction* Test_3__subinstructions[] = {
  &Test_3__field_3_1_instruction,
  &Test_3__field_2_2_instruction,
  &Test_3__group_3_1_instruction,
};

  const static Test_3::instruction_type the_instruction(
    3, // id
    "Test_3", // name
    "", // ns
    "", // templateNs
    "", // dictionary
    Test_3__subinstructions,
    0, // reset
  "", // typeRef name 
  "", // typeRef ns 
  "", // cpp_ns
  mfast::instruction_tag(0)); // tag 

  ptr_instruction = &the_instruction;
  return ptr_instruction;
}

const Test_4::instruction_type*
Test_4::instruction()
{
  const static Test_4::instruction_type* ptr_instruction;
  if (ptr_instruction) return ptr_instruction;
static uint32_field_instruction
Test_4__group_4_1__sequence_4_element__sequence_4_length_instruction(
  operator_constant,
  presence_mandatory,
  41, // id
  "field_4_1", // name
  "", // ns
  nullptr,  // opContext
  int_value_storage<uint32_t>(1U)); // initial_value

const static uint32_field_instruction
Test_4__group_4_1__sequence_4_element__field_4_2_instruction(
  operator_constant,
  presence_mandatory,
  42, // id
  "field_4_2", // name
  "", // ns
  nullptr,  // opContext
  int_value_storage<uint32_t>(0U), // initial_value
  mfast::instruction_tag(0)); // tag

const static uint32_field_instruction
Test_4__group_4_1__sequence_4_element__field_4_3_instruction(
  operator_copy,
  presence_mandatory,
  43, // id
  "field_4_3", // name
  "", // ns
  nullptr,  // opContext
  int_value_storage<uint32_t>(), // initial_value
  mfast::instruction_tag(0)); // tag

const static field_instruction* Test_4__group_4_1__sequence_4_element__subinstructions[] = {
  &Test_4__group_4_1__sequence_4_element__field_4_2_instruction,
  &Test_4__group_4_1__sequence_4_element__field_4_3_instruction,
};

const static Test_4_cref::group_4_1_cref::sequence_4_cref::instruction_type
Test_4__group_4_1__sequence_4_instruction(
  presence_mandatory,
  0, // id
  "sequence_4", // name
  "", // ns
  "", // dictionary
  Test_4__group_4_1__sequence_4_element__subinstructions,
  nullptr, // element_instruction
  nullptr, // ref_instruction
  &Test_4__group_4_1__sequence_4_element__sequence_4_length_instruction, // length
  "", // typeRef name 
  "", // typeRef ns 
  "", // cpp_ns
  mfast::instruction_tag(0)); //tag 

const static uint32_field_instruction
Test_4__group_4_1__field_4_4_instruction(
  operator_copy,
  presence_optional,
  44, // id
  "field_4_4", // name
  "", // ns
  nullptr,  // opContext
  int_value_storage<uint32_t>(), // initial_value
  mfast::instruction_tag(0)); // tag

const static field_instruction* Test_4__group_4_1__subinstructions[] = {
  &Test_4__group_4_1__sequence_4_instruction,
  &Test_4__group_4_1__field_4_4_instruction,
};

const static Test_4_cref::group_4_1_cref::instruction_type
Test_4__group_4_1_instruction(
  presence_optional,
  0, // id
  "group_4_1", // name
  "", // ns
  "", // dictionary
  Test_4__group_4_1__subinstructions,
  "", // typeRef name 
  "", // typeRef ns 
  "", // cpp_ns
  mfast::instruction_tag(0)); // tag

const static field_instruction* Test_4__subinstructions[] = {
  &Test_4__group_4_1_instruction,
};

  const static Test_4::instruction_type the_instruction(
    4, // id
    "Test_4", // name
    "", // ns
    "", // templateNs
    "", // dictionary
    Test_4__subinstructions,
    0, // reset
  "", // typeRef name 
  "", // typeRef ns 
  "", // cpp_ns
  mfast::instruction_tag(0)); // tag 

  ptr_instruction = &the_instruction;
  return ptr_instruction;
}

const template_instruction* simple13_templates_instructions[] ={
  Test_1::instruction(),
  Test_2::instruction(),
  Test_3::instruction(),
  Test_4::instruction()};

templates_description::templates_description()
  : mfast::templates_description(
    "", // ns
    "", // templateNs
    "", // dictionary
    simple13_templates_instructions)
{
}

const templates_description* templates_description::instance()
{
  static const templates_description inst;
  return &inst;
}

}
