// simple14.cpp generated by mFAST from FAST Template. 
// Do not modify this file directly. Any modifications 
// will be lost the next time this file is generated.

#include "simple14.h"

using namespace mfast;

namespace simple14
{
const Test_1::instruction_type*
Test_1::instruction()
{
  const static Test_1::instruction_type* ptr_instruction;
  if (ptr_instruction) return ptr_instruction;
static uint32_field_instruction
Test_1__sequence_1_element__sequence_1_length_instruction(
  operator_copy,
  presence_optional,
  12, // id
  "field_1_1", // name
  "", // ns
  nullptr,  // opContext
  int_value_storage<uint32_t>()); // initial_value

const static uint32_field_instruction
Test_1__sequence_1_element__field_1_2_instruction(
  operator_copy,
  presence_optional,
  13, // id
  "field_1_2", // name
  "", // ns
  nullptr,  // opContext
  int_value_storage<uint32_t>(), // initial_value
  mfast::instruction_tag(0)); // tag

const static field_instruction* Test_1__sequence_1_element__subinstructions[] = {
  &Test_1__sequence_1_element__field_1_2_instruction,
};

const static Test_1_cref::sequence_1_cref::instruction_type
Test_1__sequence_1_instruction(
  presence_optional,
  0, // id
  "sequence_1", // name
  "", // ns
  "", // dictionary
  Test_1__sequence_1_element__subinstructions,
  nullptr, // element_instruction
  nullptr, // ref_instruction
  &Test_1__sequence_1_element__sequence_1_length_instruction, // length
  "", // typeRef name 
  "", // typeRef ns 
  "", // cpp_ns
  mfast::instruction_tag(0)); //tag 

const static uint32_field_instruction
Test_1__field_1_3_instruction(
  operator_none,
  presence_optional,
  14, // id
  "field_1_3", // name
  "", // ns
  nullptr,  // opContext
  int_value_storage<uint32_t>(), // initial_value
  mfast::instruction_tag(0)); // tag

const static field_instruction* Test_1__subinstructions[] = {
  &Test_1__sequence_1_instruction,
  &Test_1__field_1_3_instruction,
};

  const static Test_1::instruction_type the_instruction(
    1, // id
    "Test_1", // name
    "", // ns
    "", // templateNs
    "", // dictionary
    Test_1__subinstructions,
    0, // reset
  "", // typeRef name 
  "", // typeRef ns 
  "", // cpp_ns
  mfast::instruction_tag(0)); // tag 

  ptr_instruction = &the_instruction;
  return ptr_instruction;
}

const Test_2::instruction_type*
Test_2::instruction()
{
  const static Test_2::instruction_type* ptr_instruction;
  if (ptr_instruction) return ptr_instruction;
static uint32_field_instruction
Test_2__sequence_2_element__sequence_2_length_instruction(
  operator_constant,
  presence_optional,
  21, // id
  "field_2_1", // name
  "", // ns
  nullptr,  // opContext
  int_value_storage<uint32_t>(1U)); // initial_value

const static uint32_field_instruction
Test_2__sequence_2_element__field_2_2_instruction(
  operator_copy,
  presence_optional,
  22, // id
  "field_2_2", // name
  "", // ns
  nullptr,  // opContext
  int_value_storage<uint32_t>(), // initial_value
  mfast::instruction_tag(0)); // tag

const static field_instruction* Test_2__sequence_2_element__subinstructions[] = {
  &Test_2__sequence_2_element__field_2_2_instruction,
};

const static Test_2_cref::sequence_2_cref::instruction_type
Test_2__sequence_2_instruction(
  presence_optional,
  0, // id
  "sequence_2", // name
  "", // ns
  "", // dictionary
  Test_2__sequence_2_element__subinstructions,
  nullptr, // element_instruction
  nullptr, // ref_instruction
  &Test_2__sequence_2_element__sequence_2_length_instruction, // length
  "", // typeRef name 
  "", // typeRef ns 
  "", // cpp_ns
  mfast::instruction_tag(0)); //tag 

const static uint32_field_instruction
Test_2__field_2_3_instruction(
  operator_none,
  presence_optional,
  23, // id
  "field_2_3", // name
  "", // ns
  nullptr,  // opContext
  int_value_storage<uint32_t>(), // initial_value
  mfast::instruction_tag(0)); // tag

const static field_instruction* Test_2__subinstructions[] = {
  &Test_2__sequence_2_instruction,
  &Test_2__field_2_3_instruction,
};

  const static Test_2::instruction_type the_instruction(
    2, // id
    "Test_2", // name
    "", // ns
    "", // templateNs
    "", // dictionary
    Test_2__subinstructions,
    0, // reset
  "", // typeRef name 
  "", // typeRef ns 
  "", // cpp_ns
  mfast::instruction_tag(0)); // tag 

  ptr_instruction = &the_instruction;
  return ptr_instruction;
}

const Test_3::instruction_type*
Test_3::instruction()
{
  const static Test_3::instruction_type* ptr_instruction;
  if (ptr_instruction) return ptr_instruction;
static uint32_field_instruction
Test_3__sequence_3_element__sequence_3_length_instruction(
  operator_default,
  presence_optional,
  31, // id
  "field_3_1", // name
  "", // ns
  nullptr,  // opContext
  int_value_storage<uint32_t>(1U)); // initial_value

const static uint32_field_instruction
Test_3__sequence_3_element__field_3_2_instruction(
  operator_copy,
  presence_optional,
  32, // id
  "field_3_2", // name
  "", // ns
  nullptr,  // opContext
  int_value_storage<uint32_t>(), // initial_value
  mfast::instruction_tag(0)); // tag

const static field_instruction* Test_3__sequence_3_element__subinstructions[] = {
  &Test_3__sequence_3_element__field_3_2_instruction,
};

const static Test_3_cref::sequence_3_cref::instruction_type
Test_3__sequence_3_instruction(
  presence_optional,
  0, // id
  "sequence_3", // name
  "", // ns
  "", // dictionary
  Test_3__sequence_3_element__subinstructions,
  nullptr, // element_instruction
  nullptr, // ref_instruction
  &Test_3__sequence_3_element__sequence_3_length_instruction, // length
  "", // typeRef name 
  "", // typeRef ns 
  "", // cpp_ns
  mfast::instruction_tag(0)); //tag 

const static uint32_field_instruction
Test_3__field_3_3_instruction(
  operator_none,
  presence_optional,
  33, // id
  "field_3_3", // name
  "", // ns
  nullptr,  // opContext
  int_value_storage<uint32_t>(), // initial_value
  mfast::instruction_tag(0)); // tag

const static field_instruction* Test_3__subinstructions[] = {
  &Test_3__sequence_3_instruction,
  &Test_3__field_3_3_instruction,
};

  const static Test_3::instruction_type the_instruction(
    3, // id
    "Test_3", // name
    "", // ns
    "", // templateNs
    "", // dictionary
    Test_3__subinstructions,
    0, // reset
  "", // typeRef name 
  "", // typeRef ns 
  "", // cpp_ns
  mfast::instruction_tag(0)); // tag 

  ptr_instruction = &the_instruction;
  return ptr_instruction;
}

const Test_4::instruction_type*
Test_4::instruction()
{
  const static Test_4::instruction_type* ptr_instruction;
  if (ptr_instruction) return ptr_instruction;
static uint32_field_instruction
Test_4__sequence_4_element__sequence_4_length_instruction(
  operator_none,
  presence_optional,
  41, // id
  "field_4_1", // name
  "", // ns
  nullptr,  // opContext
  int_value_storage<uint32_t>()); // initial_value

const static uint32_field_instruction
Test_4__sequence_4_element__field_4_2_instruction(
  operator_copy,
  presence_optional,
  42, // id
  "field_4_2", // name
  "", // ns
  nullptr,  // opContext
  int_value_storage<uint32_t>(), // initial_value
  mfast::instruction_tag(0)); // tag

const static field_instruction* Test_4__sequence_4_element__subinstructions[] = {
  &Test_4__sequence_4_element__field_4_2_instruction,
};

const static Test_4_cref::sequence_4_cref::instruction_type
Test_4__sequence_4_instruction(
  presence_optional,
  0, // id
  "sequence_4", // name
  "", // ns
  "", // dictionary
  Test_4__sequence_4_element__subinstructions,
  nullptr, // element_instruction
  nullptr, // ref_instruction
  &Test_4__sequence_4_element__sequence_4_length_instruction, // length
  "", // typeRef name 
  "", // typeRef ns 
  "", // cpp_ns
  mfast::instruction_tag(0)); //tag 

const static uint32_field_instruction
Test_4__field_4_3_instruction(
  operator_none,
  presence_optional,
  43, // id
  "field_4_3", // name
  "", // ns
  nullptr,  // opContext
  int_value_storage<uint32_t>(), // initial_value
  mfast::instruction_tag(0)); // tag

const static field_instruction* Test_4__subinstructions[] = {
  &Test_4__sequence_4_instruction,
  &Test_4__field_4_3_instruction,
};

  const static Test_4::instruction_type the_instruction(
    4, // id
    "Test_4", // name
    "", // ns
    "", // templateNs
    "", // dictionary
    Test_4__subinstructions,
    0, // reset
  "", // typeRef name 
  "", // typeRef ns 
  "", // cpp_ns
  mfast::instruction_tag(0)); // tag 

  ptr_instruction = &the_instruction;
  return ptr_instruction;
}

const Test_5::instruction_type*
Test_5::instruction()
{
  const static Test_5::instruction_type* ptr_instruction;
  if (ptr_instruction) return ptr_instruction;
const static uint32_field_instruction
Test_5__field_5_1_instruction(
  operator_copy,
  presence_optional,
  51, // id
  "field_5_1", // name
  "", // ns
  nullptr,  // opContext
  int_value_storage<uint32_t>(), // initial_value
  mfast::instruction_tag(0)); // tag

const static uint32_field_instruction
Test_5__field_5_2_instruction(
  operator_copy,
  presence_mandatory,
  52, // id
  "field_5_2", // name
  "", // ns
  nullptr,  // opContext
  int_value_storage<uint32_t>(), // initial_value
  mfast::instruction_tag(0)); // tag

static uint32_field_instruction
Test_5__sequence_5_1_element__sequence_5_1_length_instruction(
  operator_none,
  presence_mandatory,
  53, // id
  "field_5_3", // name
  "", // ns
  nullptr,  // opContext
  int_value_storage<uint32_t>()); // initial_value

const static uint32_field_instruction
Test_5__sequence_5_1_element__field_5_4_instruction(
  operator_copy,
  presence_optional,
  54, // id
  "field_5_4", // name
  "", // ns
  nullptr,  // opContext
  int_value_storage<uint32_t>(), // initial_value
  mfast::instruction_tag(0)); // tag

static uint32_field_instruction
Test_5__sequence_5_1_element__sequence_5_2_element__sequence_5_2_length_instruction(
  operator_copy,
  presence_optional,
  55, // id
  "field_5_5", // name
  "", // ns
  nullptr,  // opContext
  int_value_storage<uint32_t>()); // initial_value

const static uint32_field_instruction
Test_5__sequence_5_1_element__sequence_5_2_element__field_5_6_instruction(
  operator_none,
  presence_mandatory,
  56, // id
  "field_5_6", // name
  "", // ns
  nullptr,  // opContext
  int_value_storage<uint32_t>(), // initial_value
  mfast::instruction_tag(0)); // tag

const static field_instruction* Test_5__sequence_5_1_element__sequence_5_2_element__subinstructions[] = {
  &Test_5__sequence_5_1_element__sequence_5_2_element__field_5_6_instruction,
};

const static Test_5_cref::sequence_5_1_element_cref::sequence_5_2_cref::instruction_type
Test_5__sequence_5_1_element__sequence_5_2_instruction(
  presence_optional,
  0, // id
  "sequence_5_2", // name
  "", // ns
  "", // dictionary
  Test_5__sequence_5_1_element__sequence_5_2_element__subinstructions,
  nullptr, // element_instruction
  nullptr, // ref_instruction
  &Test_5__sequence_5_1_element__sequence_5_2_element__sequence_5_2_length_instruction, // length
  "", // typeRef name 
  "", // typeRef ns 
  "", // cpp_ns
  mfast::instruction_tag(0)); //tag 

const static field_instruction* Test_5__sequence_5_1_element__subinstructions[] = {
  &Test_5__sequence_5_1_element__field_5_4_instruction,
  &Test_5__sequence_5_1_element__sequence_5_2_instruction,
};

const static Test_5_cref::sequence_5_1_cref::instruction_type
Test_5__sequence_5_1_instruction(
  presence_mandatory,
  0, // id
  "sequence_5_1", // name
  "", // ns
  "", // dictionary
  Test_5__sequence_5_1_element__subinstructions,
  nullptr, // element_instruction
  nullptr, // ref_instruction
  &Test_5__sequence_5_1_element__sequence_5_1_length_instruction, // length
  "", // typeRef name 
  "", // typeRef ns 
  "", // cpp_ns
  mfast::instruction_tag(0)); //tag 

const static field_instruction* Test_5__subinstructions[] = {
  &Test_5__field_5_1_instruction,
  &Test_5__field_5_2_instruction,
  &Test_5__sequence_5_1_instruction,
};

  const static Test_5::instruction_type the_instruction(
    5, // id
    "Test_5", // name
    "", // ns
    "", // templateNs
    "", // dictionary
    Test_5__subinstructions,
    0, // reset
  "", // typeRef name 
  "", // typeRef ns 
  "", // cpp_ns
  mfast::instruction_tag(0)); // tag 

  ptr_instruction = &the_instruction;
  return ptr_instruction;
}

const Test_6::instruction_type*
Test_6::instruction()
{
  const static Test_6::instruction_type* ptr_instruction;
  if (ptr_instruction) return ptr_instruction;
const static uint32_field_instruction
Test_6__field_6_1_instruction(
  operator_copy,
  presence_optional,
  61, // id
  "field_6_1", // name
  "", // ns
  nullptr,  // opContext
  int_value_storage<uint32_t>(), // initial_value
  mfast::instruction_tag(0)); // tag

static uint32_field_instruction
Test_6__group_6__sequence_6_1_element__sequence_6_1_length_instruction(
  operator_none,
  presence_mandatory,
  62, // id
  "field_6_2", // name
  "", // ns
  nullptr,  // opContext
  int_value_storage<uint32_t>()); // initial_value

const static uint32_field_instruction
Test_6__group_6__sequence_6_1_element__field_6_3_instruction(
  operator_copy,
  presence_mandatory,
  63, // id
  "field_6_3", // name
  "", // ns
  nullptr,  // opContext
  int_value_storage<uint32_t>(), // initial_value
  mfast::instruction_tag(0)); // tag

const static uint32_field_instruction
Test_6__group_6__sequence_6_1_element__field_6_4_instruction(
  operator_copy,
  presence_optional,
  64, // id
  "field_6_4", // name
  "", // ns
  nullptr,  // opContext
  int_value_storage<uint32_t>(), // initial_value
  mfast::instruction_tag(0)); // tag

static uint32_field_instruction
Test_6__group_6__sequence_6_1_element__sequence_6_2_element__sequence_6_2_length_instruction(
  operator_copy,
  presence_optional,
  65, // id
  "field_6_5", // name
  "", // ns
  nullptr,  // opContext
  int_value_storage<uint32_t>()); // initial_value

const static uint32_field_instruction
Test_6__group_6__sequence_6_1_element__sequence_6_2_element__field_6_6_instruction(
  operator_none,
  presence_mandatory,
  66, // id
  "field_6_6", // name
  "", // ns
  nullptr,  // opContext
  int_value_storage<uint32_t>(), // initial_value
  mfast::instruction_tag(0)); // tag

const static field_instruction* Test_6__group_6__sequence_6_1_element__sequence_6_2_element__subinstructions[] = {
  &Test_6__group_6__sequence_6_1_element__sequence_6_2_element__field_6_6_instruction,
};

const static Test_6_cref::group_6_cref::sequence_6_1_element_cref::sequence_6_2_cref::instruction_type
Test_6__group_6__sequence_6_1_element__sequence_6_2_instruction(
  presence_optional,
  0, // id
  "sequence_6_2", // name
  "", // ns
  "", // dictionary
  Test_6__group_6__sequence_6_1_element__sequence_6_2_element__subinstructions,
  nullptr, // element_instruction
  nullptr, // ref_instruction
  &Test_6__group_6__sequence_6_1_element__sequence_6_2_element__sequence_6_2_length_instruction, // length
  "", // typeRef name 
  "", // typeRef ns 
  "", // cpp_ns
  mfast::instruction_tag(0)); //tag 

const static field_instruction* Test_6__group_6__sequence_6_1_element__subinstructions[] = {
  &Test_6__group_6__sequence_6_1_element__field_6_3_instruction,
  &Test_6__group_6__sequence_6_1_element__field_6_4_instruction,
  &Test_6__group_6__sequence_6_1_element__sequence_6_2_instruction,
};

const static Test_6_cref::group_6_cref::sequence_6_1_cref::instruction_type
Test_6__group_6__sequence_6_1_instruction(
  presence_mandatory,
  0, // id
  "sequence_6_1", // name
  "", // ns
  "", // dictionary
  Test_6__group_6__sequence_6_1_element__subinstructions,
  nullptr, // element_instruction
  nullptr, // ref_instruction
  &Test_6__group_6__sequence_6_1_element__sequence_6_1_length_instruction, // length
  "", // typeRef name 
  "", // typeRef ns 
  "", // cpp_ns
  mfast::instruction_tag(0)); //tag 

const static field_instruction* Test_6__group_6__subinstructions[] = {
  &Test_6__group_6__sequence_6_1_instruction,
};

const static Test_6_cref::group_6_cref::instruction_type
Test_6__group_6_instruction(
  presence_mandatory,
  0, // id
  "group_6", // name
  "", // ns
  "", // dictionary
  Test_6__group_6__subinstructions,
  "", // typeRef name 
  "", // typeRef ns 
  "", // cpp_ns
  mfast::instruction_tag(0)); // tag

const static field_instruction* Test_6__subinstructions[] = {
  &Test_6__field_6_1_instruction,
  &Test_6__group_6_instruction,
};

  const static Test_6::instruction_type the_instruction(
    6, // id
    "Test_6", // name
    "", // ns
    "", // templateNs
    "", // dictionary
    Test_6__subinstructions,
    0, // reset
  "", // typeRef name 
  "", // typeRef ns 
  "", // cpp_ns
  mfast::instruction_tag(0)); // tag 

  ptr_instruction = &the_instruction;
  return ptr_instruction;
}

const Test_7::instruction_type*
Test_7::instruction()
{
  const static Test_7::instruction_type* ptr_instruction;
  if (ptr_instruction) return ptr_instruction;
static uint32_field_instruction
Test_7__sequence_7_element__sequence_7_length_instruction(
  operator_none,
  presence_mandatory,
  72, // id
  "field_7_2", // name
  "", // ns
  nullptr,  // opContext
  int_value_storage<uint32_t>()); // initial_value

const static uint32_field_instruction
Test_7__sequence_7_element__field_7_3_instruction(
  operator_copy,
  presence_mandatory,
  73, // id
  "field_7_3", // name
  "", // ns
  nullptr,  // opContext
  int_value_storage<uint32_t>(), // initial_value
  mfast::instruction_tag(0)); // tag

const static uint32_field_instruction
Test_7__sequence_7_element__group_7__field_7_4_instruction(
  operator_none,
  presence_mandatory,
  74, // id
  "field_7_4", // name
  "", // ns
  nullptr,  // opContext
  int_value_storage<uint32_t>(), // initial_value
  mfast::instruction_tag(0)); // tag

const static field_instruction* Test_7__sequence_7_element__group_7__subinstructions[] = {
  &Test_7__sequence_7_element__group_7__field_7_4_instruction,
};

const static Test_7_cref::sequence_7_element_cref::group_7_cref::instruction_type
Test_7__sequence_7_element__group_7_instruction(
  presence_optional,
  0, // id
  "group_7", // name
  "", // ns
  "", // dictionary
  Test_7__sequence_7_element__group_7__subinstructions,
  "", // typeRef name 
  "", // typeRef ns 
  "", // cpp_ns
  mfast::instruction_tag(0)); // tag

const static field_instruction* Test_7__sequence_7_element__subinstructions[] = {
  &Test_7__sequence_7_element__field_7_3_instruction,
  &Test_7__sequence_7_element__group_7_instruction,
};

const static Test_7_cref::sequence_7_cref::instruction_type
Test_7__sequence_7_instruction(
  presence_mandatory,
  0, // id
  "sequence_7", // name
  "", // ns
  "", // dictionary
  Test_7__sequence_7_element__subinstructions,
  nullptr, // element_instruction
  nullptr, // ref_instruction
  &Test_7__sequence_7_element__sequence_7_length_instruction, // length
  "", // typeRef name 
  "", // typeRef ns 
  "", // cpp_ns
  mfast::instruction_tag(0)); //tag 

const static field_instruction* Test_7__subinstructions[] = {
  &Test_7__sequence_7_instruction,
};

  const static Test_7::instruction_type the_instruction(
    7, // id
    "Test_7", // name
    "", // ns
    "", // templateNs
    "", // dictionary
    Test_7__subinstructions,
    0, // reset
  "", // typeRef name 
  "", // typeRef ns 
  "", // cpp_ns
  mfast::instruction_tag(0)); // tag 

  ptr_instruction = &the_instruction;
  return ptr_instruction;
}

const Test_8::instruction_type*
Test_8::instruction()
{
  const static Test_8::instruction_type* ptr_instruction;
  if (ptr_instruction) return ptr_instruction;
static uint32_field_instruction
Test_8__sequence_8_element__sequence_8_length_instruction(
  operator_none,
  presence_mandatory,
  81, // id
  "field_8_1", // name
  "", // ns
  nullptr,  // opContext
  int_value_storage<uint32_t>()); // initial_value

const static uint32_field_instruction
Test_8__sequence_8_element__field_8_2_instruction(
  operator_copy,
  presence_mandatory,
  82, // id
  "field_8_2", // name
  "", // ns
  nullptr,  // opContext
  int_value_storage<uint32_t>(), // initial_value
  mfast::instruction_tag(0)); // tag

const static decimal_field_instruction
Test_8__sequence_8_element__field_8_3_instruction(
  operator_delta,
  presence_optional,
  84, // id
  "field_8_3", // name
  "", // ns
  nullptr,  // opContext
  decimal_value_storage(), // initial_value
  mfast::instruction_tag(0)); // tag

const static field_instruction* Test_8__sequence_8_element__subinstructions[] = {
  &Test_8__sequence_8_element__field_8_2_instruction,
  &Test_8__sequence_8_element__field_8_3_instruction,
};

const static Test_8_cref::sequence_8_cref::instruction_type
Test_8__sequence_8_instruction(
  presence_mandatory,
  0, // id
  "sequence_8", // name
  "", // ns
  "", // dictionary
  Test_8__sequence_8_element__subinstructions,
  nullptr, // element_instruction
  nullptr, // ref_instruction
  &Test_8__sequence_8_element__sequence_8_length_instruction, // length
  "", // typeRef name 
  "", // typeRef ns 
  "", // cpp_ns
  mfast::instruction_tag(0)); //tag 

const static field_instruction* Test_8__subinstructions[] = {
  &Test_8__sequence_8_instruction,
};

  const static Test_8::instruction_type the_instruction(
    8, // id
    "Test_8", // name
    "", // ns
    "", // templateNs
    "", // dictionary
    Test_8__subinstructions,
    0, // reset
  "", // typeRef name 
  "", // typeRef ns 
  "", // cpp_ns
  mfast::instruction_tag(0)); // tag 

  ptr_instruction = &the_instruction;
  return ptr_instruction;
}

const template_instruction* simple14_templates_instructions[] ={
  Test_1::instruction(),
  Test_2::instruction(),
  Test_3::instruction(),
  Test_4::instruction(),
  Test_5::instruction(),
  Test_6::instruction(),
  Test_7::instruction(),
  Test_8::instruction()};

templates_description::templates_description()
  : mfast::templates_description(
    "", // ns
    "", // templateNs
    "", // dictionary
    simple14_templates_instructions)
{
}

const templates_description* templates_description::instance()
{
  static const templates_description inst;
  return &inst;
}

}
