// test1.inl generated by mFAST from FAST Template. 
// Do not modify this file directly. Any modifications 
// will be lost the next time this file is generated.

inline
SampleInfo_cref::SampleInfo_cref()
  : base_type(nullptr, nullptr)
{
}

template <typename T>inline
SampleInfo_cref::SampleInfo_cref(
  typename std::enable_if<std::is_same<typename T::cref_type, SampleInfo_cref>::value, const mfast::value_storage*>::type storage_array,
  const T* instruction)
  : base_type(storage_array, instruction)
{
}

inline
SampleInfo_cref::SampleInfo_cref(
  const mfast::message_cref& other)
  : base_type(other)
{
}

inline
SampleInfo_cref::SampleInfo_cref(
  const mfast::field_cref& other)
  : base_type(mfast::field_cref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
SampleInfo_cref::operator mfast::message_cref()
{
  return mfast::message_cref(this->storage(), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void SampleInfo_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_cref<ascii_string_cref, copy_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_cref<uint32_cref, increment_operator_tag, properties_type< 0> > ((*this)[3]) );
}

inline
SampleInfo_mref::SampleInfo_mref()
  : base_type(nullptr, nullptr, nullptr)
{
}

template <typename T>inline
SampleInfo_mref::SampleInfo_mref(
  mfast::allocator* alloc,
  typename std::enable_if<std::is_same<typename T::cref_type, SampleInfo_cref>::value, mfast::value_storage*>::type storage_array,
  const T*          instruction)
  : base_type(alloc, storage_array, instruction)
{
}

inline
SampleInfo_mref::SampleInfo_mref(
  const mfast::message_mref& other)
  : base_type(other)
{
}

inline
SampleInfo_mref::SampleInfo_mref(
  const mfast::field_mref_base& other)
  : base_type(other.allocator(),
              mfast::field_mref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
SampleInfo_mref::operator mfast::message_mref()
{
  return mfast::message_mref(this->allocator(), const_cast<mfast::value_storage*>(this->storage()), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void SampleInfo_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_mref<ascii_string_mref, copy_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_mref<uint32_mref, increment_operator_tag, properties_type< 0> > ((*this)[3]) );
}

inline
SampleInfo::SampleInfo(
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
}

inline
SampleInfo::SampleInfo(
  const SampleInfo_cref& other,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data(), other.field_storage(0))
{
}

#ifdef MFAST_JSON_H
SampleInfo::SampleInfo(
  const char* json_initializer,
  int json_object_tag_mask,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
  std::stringstream strm(json_initializer);
  mfast::json::decode(strm, this->mref(), json_object_tag_mask);
}

#endif
inline SampleInfo::cref_type
SampleInfo::ref() const
{
  return SampleInfo::cref_type(my_storage_.of_group.content_, instruction());
}

inline SampleInfo::cref_type
SampleInfo::cref() const
{
  return SampleInfo::cref_type(my_storage_.of_group.content_, instruction());
}

inline SampleInfo::mref_type
SampleInfo::ref()
{
  return SampleInfo::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline SampleInfo::mref_type
SampleInfo::mref()
{
  return SampleInfo::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline mfast::ascii_string_cref
SampleInfo_cref::get_MessageType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
SampleInfo_cref::try_get_MessageType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
SampleInfo_cref::get_BeginString() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
SampleInfo_cref::try_get_BeginString() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
SampleInfo_cref::get_SenderCompID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_cref
SampleInfo_cref::try_get_SenderCompID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_mref
SampleInfo_mref::set_SenderCompID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[2]);
}

inline mfast::uint32_cref
SampleInfo_cref::get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[3]);
}

inline mfast::uint32_cref
SampleInfo_cref::try_get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[3]);
}

inline mfast::uint32_mref
SampleInfo_mref::set_MsgSeqNum() const
{
  return static_cast<mfast::uint32_mref>((*this)[3]);
}

