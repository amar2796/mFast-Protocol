// test5.inl generated by mFAST from FAST Template. 
// Do not modify this file directly. Any modifications 
// will be lost the next time this file is generated.

inline
LoginAccount_cref::LoginAccount_cref()
  : base_type(nullptr, nullptr)
{
}

template <typename T>inline
LoginAccount_cref::LoginAccount_cref(
  typename std::enable_if<std::is_same<typename T::cref_type, LoginAccount_cref>::value, const mfast::value_storage*>::type storage_array,
  const T* instruction)
  : base_type(storage_array, instruction)
{
}

inline
LoginAccount_cref::LoginAccount_cref(
  const mfast::message_cref& other)
  : base_type(other)
{
}

inline
LoginAccount_cref::LoginAccount_cref(
  const mfast::field_cref& other)
  : base_type(mfast::field_cref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
LoginAccount_cref::operator mfast::message_cref()
{
  return mfast::message_cref(this->storage(), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void LoginAccount_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[1]) );
}

inline
LoginAccount_mref::LoginAccount_mref()
  : base_type(nullptr, nullptr, nullptr)
{
}

template <typename T>inline
LoginAccount_mref::LoginAccount_mref(
  mfast::allocator* alloc,
  typename std::enable_if<std::is_same<typename T::cref_type, LoginAccount_cref>::value, mfast::value_storage*>::type storage_array,
  const T*          instruction)
  : base_type(alloc, storage_array, instruction)
{
}

inline
LoginAccount_mref::LoginAccount_mref(
  const mfast::message_mref& other)
  : base_type(other)
{
}

inline
LoginAccount_mref::LoginAccount_mref(
  const mfast::field_mref_base& other)
  : base_type(other.allocator(),
              mfast::field_mref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
LoginAccount_mref::operator mfast::message_mref()
{
  return mfast::message_mref(this->allocator(), const_cast<mfast::value_storage*>(this->storage()), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void LoginAccount_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[1]) );
}

inline
LoginAccount::LoginAccount(
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
}

inline
LoginAccount::LoginAccount(
  const LoginAccount_cref& other,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data(), other.field_storage(0))
{
}

#ifdef MFAST_JSON_H
LoginAccount::LoginAccount(
  const char* json_initializer,
  int json_object_tag_mask,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
  std::stringstream strm(json_initializer);
  mfast::json::decode(strm, this->mref(), json_object_tag_mask);
}

#endif
inline LoginAccount::cref_type
LoginAccount::ref() const
{
  return LoginAccount::cref_type(my_storage_.of_group.content_, instruction());
}

inline LoginAccount::cref_type
LoginAccount::cref() const
{
  return LoginAccount::cref_type(my_storage_.of_group.content_, instruction());
}

inline LoginAccount::mref_type
LoginAccount::ref()
{
  return LoginAccount::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline LoginAccount::mref_type
LoginAccount::mref()
{
  return LoginAccount::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline mfast::ascii_string_cref
LoginAccount_cref::get_userName() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
LoginAccount_cref::try_get_userName() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_mref
LoginAccount_mref::set_userName() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[0]);
}

inline mfast::ascii_string_cref
LoginAccount_cref::get_password() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
LoginAccount_cref::try_get_password() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_mref
LoginAccount_mref::set_password() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[1]);
}

inline
BankAccount_cref::BankAccount_cref()
  : base_type(nullptr, nullptr)
{
}

template <typename T>inline
BankAccount_cref::BankAccount_cref(
  typename std::enable_if<std::is_same<typename T::cref_type, BankAccount_cref>::value, const mfast::value_storage*>::type storage_array,
  const T* instruction)
  : base_type(storage_array, instruction)
{
}

inline
BankAccount_cref::BankAccount_cref(
  const mfast::message_cref& other)
  : base_type(other)
{
}

inline
BankAccount_cref::BankAccount_cref(
  const mfast::field_cref& other)
  : base_type(mfast::field_cref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
BankAccount_cref::operator mfast::message_cref()
{
  return mfast::message_cref(this->storage(), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void BankAccount_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[2]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[3]) );
}

inline
BankAccount_mref::BankAccount_mref()
  : base_type(nullptr, nullptr, nullptr)
{
}

template <typename T>inline
BankAccount_mref::BankAccount_mref(
  mfast::allocator* alloc,
  typename std::enable_if<std::is_same<typename T::cref_type, BankAccount_cref>::value, mfast::value_storage*>::type storage_array,
  const T*          instruction)
  : base_type(alloc, storage_array, instruction)
{
}

inline
BankAccount_mref::BankAccount_mref(
  const mfast::message_mref& other)
  : base_type(other)
{
}

inline
BankAccount_mref::BankAccount_mref(
  const mfast::field_mref_base& other)
  : base_type(other.allocator(),
              mfast::field_mref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
BankAccount_mref::operator mfast::message_mref()
{
  return mfast::message_mref(this->allocator(), const_cast<mfast::value_storage*>(this->storage()), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void BankAccount_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[2]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[3]) );
}

inline
BankAccount::BankAccount(
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
}

inline
BankAccount::BankAccount(
  const BankAccount_cref& other,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data(), other.field_storage(0))
{
}

#ifdef MFAST_JSON_H
BankAccount::BankAccount(
  const char* json_initializer,
  int json_object_tag_mask,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
  std::stringstream strm(json_initializer);
  mfast::json::decode(strm, this->mref(), json_object_tag_mask);
}

#endif
inline BankAccount::cref_type
BankAccount::ref() const
{
  return BankAccount::cref_type(my_storage_.of_group.content_, instruction());
}

inline BankAccount::cref_type
BankAccount::cref() const
{
  return BankAccount::cref_type(my_storage_.of_group.content_, instruction());
}

inline BankAccount::mref_type
BankAccount::ref()
{
  return BankAccount::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline BankAccount::mref_type
BankAccount::mref()
{
  return BankAccount::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline mfast::uint64_cref
BankAccount_cref::get_number() const
{
  return static_cast<mfast::uint64_cref>((*this)[0]);
}

inline mfast::uint64_cref
BankAccount_cref::try_get_number() const
{
  return static_cast<mfast::uint64_cref>((*this)[0]);
}

inline mfast::uint64_mref
BankAccount_mref::set_number() const
{
  return static_cast<mfast::uint64_mref>((*this)[0]);
}

inline mfast::uint64_cref
BankAccount_cref::get_routingNumber() const
{
  return static_cast<mfast::uint64_cref>((*this)[1]);
}

inline mfast::uint64_cref
BankAccount_cref::try_get_routingNumber() const
{
  return static_cast<mfast::uint64_cref>((*this)[1]);
}

inline mfast::uint64_mref
BankAccount_mref::set_routingNumber() const
{
  return static_cast<mfast::uint64_mref>((*this)[1]);
}

inline mfast::ascii_string_cref
BankAccount_cref::get_bank() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_cref
BankAccount_cref::try_get_bank() const
{
  if ((*this)[2].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_mref
BankAccount_mref::set_bank() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[2]);
}

inline
void
BankAccount_mref::omit_bank() const
{
  (*this)[2].omit();
}

inline mfast::ascii_string_cref
BankAccount_cref::get_alias() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[3]);
}

inline mfast::ascii_string_cref
BankAccount_cref::try_get_alias() const
{
  if ((*this)[3].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[3]);
}

inline mfast::ascii_string_mref
BankAccount_mref::set_alias() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[3]);
}

inline
void
BankAccount_mref::omit_alias() const
{
  (*this)[3].omit();
}

inline
Person_cref::Person_cref()
  : base_type(nullptr, nullptr)
{
}

template <typename T>inline
Person_cref::Person_cref(
  typename std::enable_if<std::is_same<typename T::cref_type, Person_cref>::value, const mfast::value_storage*>::type storage_array,
  const T* instruction)
  : base_type(storage_array, instruction)
{
}

inline
Person_cref::Person_cref(
  const mfast::message_cref& other)
  : base_type(other)
{
}

inline
Person_cref::Person_cref(
  const mfast::field_cref& other)
  : base_type(mfast::field_cref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
Person_cref::operator mfast::message_cref()
{
  return mfast::message_cref(this->storage(), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void Person_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[2]) );
  {
    ext_cref< address_cref,  group_type_tag, properties_type< 1> > ext_cref_group((*this)[3]);
    ext_cref_group.set_group_present(this->field_storage(3)->is_present());
    visitor.visit(ext_cref_group);
  }
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 0> >, ext_cref< typename phoneNumbers_cref::reference, sequence_element_tag,properties_type< 0> > > ((*this)[4]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 0> >, ext_cref< typename emails_cref::reference, none_operator_tag, properties_type< 0>  > > ((*this)[5]) );
  {
    ext_cref< login_cref,  group_type_tag, properties_type< 1> > ext_cref_group((*this)[6]);
    ext_cref_group.set_group_present(this->field_storage(6)->is_present());
    visitor.visit(ext_cref_group);
  }
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 1> >, ext_cref< typename bankAccounts_cref::reference, none_operator_tag, properties_type< 0>  > > ((*this)[7]) );
}

inline
Person_mref::Person_mref()
  : base_type(nullptr, nullptr, nullptr)
{
}

template <typename T>inline
Person_mref::Person_mref(
  mfast::allocator* alloc,
  typename std::enable_if<std::is_same<typename T::cref_type, Person_cref>::value, mfast::value_storage*>::type storage_array,
  const T*          instruction)
  : base_type(alloc, storage_array, instruction)
{
}

inline
Person_mref::Person_mref(
  const mfast::message_mref& other)
  : base_type(other)
{
}

inline
Person_mref::Person_mref(
  const mfast::field_mref_base& other)
  : base_type(other.allocator(),
              mfast::field_mref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
Person_mref::operator mfast::message_mref()
{
  return mfast::message_mref(this->allocator(), const_cast<mfast::value_storage*>(this->storage()), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void Person_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_mref< address_mref, group_type_tag, properties_type< 1> > ((*this)[3]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 0> >, ext_mref< typename phoneNumbers_mref::reference, sequence_element_tag,properties_type< 0> > > ((*this)[4]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 0> >, ext_mref< typename emails_mref::reference, none_operator_tag, properties_type< 0>  > > ((*this)[5]) );
  visitor.visit(ext_mref< login_mref, group_type_tag, properties_type< 1> > ((*this)[6]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 1> >, ext_mref< typename bankAccounts_mref::reference, none_operator_tag, properties_type< 0>  > > ((*this)[7]) );
}

inline
Person::Person(
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
}

inline
Person::Person(
  const Person_cref& other,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data(), other.field_storage(0))
{
}

#ifdef MFAST_JSON_H
Person::Person(
  const char* json_initializer,
  int json_object_tag_mask,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
  std::stringstream strm(json_initializer);
  mfast::json::decode(strm, this->mref(), json_object_tag_mask);
}

#endif
inline Person::cref_type
Person::ref() const
{
  return Person::cref_type(my_storage_.of_group.content_, instruction());
}

inline Person::cref_type
Person::cref() const
{
  return Person::cref_type(my_storage_.of_group.content_, instruction());
}

inline Person::mref_type
Person::ref()
{
  return Person::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline Person::mref_type
Person::mref()
{
  return Person::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline mfast::ascii_string_cref
Person_cref::get_firstName() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
Person_cref::try_get_firstName() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_mref
Person_mref::set_firstName() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[0]);
}

inline mfast::ascii_string_cref
Person_cref::get_lastName() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
Person_cref::try_get_lastName() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_mref
Person_mref::set_lastName() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[1]);
}

inline mfast::uint32_cref
Person_cref::get_age() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_cref
Person_cref::try_get_age() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_mref
Person_mref::set_age() const
{
  return static_cast<mfast::uint32_mref>((*this)[2]);
}


inline Person_cref::address_cref
Person_cref::get_address() const
{
  if ((*this)[3].absent())
    return Person_cref::address_cref(nullptr, Person_cref::address_cref::instruction_cptr(nullptr));
  return static_cast<Person_cref::address_cref>((*this)[3]);
}


inline Person_cref::address_cref
Person_cref::try_get_address() const
{
  if ((*this)[3].absent())
    throw mfast::bad_optional_access();
  return static_cast<Person_cref::address_cref>((*this)[3]);
}

inline Person_mref::address_mref
Person_mref::set_address() const
{
  this->field_storage(3)->present(true);
  return Person_mref::address_mref((*this)[3]);
}

inline
void
Person_mref::omit_address() const
{
  (*this)[3].omit();
}

inline
Person_cref::address_cref::address_cref()
  : base_type(nullptr, nullptr)
{
}

template <typename T>inline
Person_cref::address_cref::address_cref(
  typename std::enable_if<std::is_same<typename T::cref_type, address_cref>::value, const mfast::value_storage*>::type storage_array,
  const T* instruction)
  : base_type(storage_array, instruction)
{
}

inline
Person_cref::address_cref::address_cref(
  const mfast::field_cref& other)
  : base_type(other)
{
}

template <typename Visitor>
inline void Person_cref::address_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
}

inline
Person_mref::address_mref::address_mref()
  : base_type(nullptr, nullptr, nullptr)
{
}

template <typename T>inline
Person_mref::address_mref::address_mref(
  mfast::allocator* alloc,
  typename std::enable_if<std::is_same<typename T::cref_type, address_cref>::value, mfast::value_storage*>::type storage_array,
  const T*          instruction)
  : base_type(alloc, storage_array, instruction)
{
}

inline
Person_mref::address_mref::address_mref(
  const mfast::field_mref_base& other)
  : base_type(other)
{
}

template <typename Visitor>
inline void Person_mref::address_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
}

inline mfast::ascii_string_cref
Person_cref::address_cref::get_streetAddress() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
Person_cref::address_cref::try_get_streetAddress() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_mref
Person_mref::address_mref::set_streetAddress() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[0]);
}

inline mfast::ascii_string_cref
Person_cref::address_cref::get_city() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
Person_cref::address_cref::try_get_city() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_mref
Person_mref::address_mref::set_city() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[1]);
}

inline mfast::ascii_string_cref
Person_cref::address_cref::get_state() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_cref
Person_cref::address_cref::try_get_state() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_mref
Person_mref::address_mref::set_state() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[2]);
}

inline mfast::uint32_cref
Person_cref::address_cref::get_postalCode() const
{
  return static_cast<mfast::uint32_cref>((*this)[3]);
}

inline mfast::uint32_cref
Person_cref::address_cref::try_get_postalCode() const
{
  return static_cast<mfast::uint32_cref>((*this)[3]);
}

inline mfast::uint32_mref
Person_mref::address_mref::set_postalCode() const
{
  return static_cast<mfast::uint32_mref>((*this)[3]);
}

inline Person_cref::phoneNumbers_cref
Person_cref::get_phoneNumbers() const
{
  return static_cast<Person_cref::phoneNumbers_cref>((*this)[4]);
}

inline Person_cref::phoneNumbers_cref
Person_cref::try_get_phoneNumbers() const
{
  return static_cast<Person_cref::phoneNumbers_cref>((*this)[4]);
}

inline Person_mref::phoneNumbers_mref
Person_mref::set_phoneNumbers() const
{
  return static_cast<Person_mref::phoneNumbers_mref>((*this)[4]);
}

inline
Person_cref::phoneNumbers_element_cref::phoneNumbers_element_cref(
  const mfast::value_storage*   storage,
  Person_cref::phoneNumbers_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
Person_mref::phoneNumbers_element_mref::phoneNumbers_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  Person_mref::phoneNumbers_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void Person_cref::phoneNumbers_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 0> > ((*this)[1]) );
}

template <typename Visitor>
inline void Person_mref::phoneNumbers_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 0> > ((*this)[1]) );
}

inline mfast::ascii_string_cref
Person_cref::phoneNumbers_element_cref::get_type() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
Person_cref::phoneNumbers_element_cref::try_get_type() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_mref
Person_mref::phoneNumbers_element_mref::set_type() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[0]);
}

inline mfast::ascii_string_cref
Person_cref::phoneNumbers_element_cref::get_number() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
Person_cref::phoneNumbers_element_cref::try_get_number() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_mref
Person_mref::phoneNumbers_element_mref::set_number() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[1]);
}

inline Person_cref::emails_cref
Person_cref::get_emails() const
{
  return static_cast<Person_cref::emails_cref>((*this)[5]);
}

inline Person_cref::emails_cref
Person_cref::try_get_emails() const
{
  return static_cast<Person_cref::emails_cref>((*this)[5]);
}

inline Person_mref::emails_mref
Person_mref::set_emails() const
{
  return static_cast<Person_mref::emails_mref>((*this)[5]);
}


inline Person_cref::login_cref
Person_cref::get_login() const
{
  if ((*this)[6].absent())
    return Person_cref::login_cref(nullptr, Person_cref::login_cref::instruction_cptr(nullptr));
  return static_cast<Person_cref::login_cref>((*this)[6]);
}


inline Person_cref::login_cref
Person_cref::try_get_login() const
{
  if ((*this)[6].absent())
    throw mfast::bad_optional_access();
  return static_cast<Person_cref::login_cref>((*this)[6]);
}

inline Person_mref::login_mref
Person_mref::set_login() const
{
  this->field_storage(6)->present(true);
  return Person_mref::login_mref((*this)[6]);
}

inline
void
Person_mref::omit_login() const
{
  (*this)[6].omit();
}

inline void
Person_mref::link_login(const Person_mref::login_mref& ref) const
{
  this->link_group_at(6, ref);
}

inline void
Person_mref::unlink_login() const
{
  this->unlink_group_at(6);
}

inline Person_cref::bankAccounts_cref
Person_cref::get_bankAccounts() const
{
  return static_cast<Person_cref::bankAccounts_cref>((*this)[7]);
}

inline Person_cref::bankAccounts_cref
Person_cref::try_get_bankAccounts() const
{
  if ((*this)[7].absent())
    throw mfast::bad_optional_access();
  return static_cast<Person_cref::bankAccounts_cref>((*this)[7]);
}

inline Person_mref::bankAccounts_mref
Person_mref::set_bankAccounts() const
{
  return static_cast<Person_mref::bankAccounts_mref>((*this)[7]);
}

inline
void
Person_mref::omit_bankAccounts() const
{
  (*this)[7].omit();
}

inline PersonView::PersonView(const Person_cref& ref)
  : ref_(ref)
{
}

inline mfast::view_iterator PersonView::begin() const
{
  return mfast::view_iterator(ref_, info_.data_.begin(), info_.max_depth_);
}

inline mfast::view_iterator  PersonView::end() const
{
  return mfast::view_iterator(info_.data_.end()-1);
}

template <typename FieldAccessor>
inline void  PersonView::accept_accessor(FieldAccessor& accessor) const
{
  for (auto f: *this)
  {
    if (f.present())      mfast::apply_accessor(accessor, f);
  }
}
