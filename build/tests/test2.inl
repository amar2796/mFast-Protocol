// test2.inl generated by mFAST from FAST Template. 
// Do not modify this file directly. Any modifications 
// will be lost the next time this file is generated.

inline
StandardTrailer_cref::StandardTrailer_cref()
  : base_type(nullptr, nullptr)
{
}

template <typename T>inline
StandardTrailer_cref::StandardTrailer_cref(
  typename std::enable_if<std::is_same<typename T::cref_type, StandardTrailer_cref>::value, const mfast::value_storage*>::type storage_array,
  const T* instruction)
  : base_type(storage_array, instruction)
{
}

inline
StandardTrailer_cref::StandardTrailer_cref(
  const mfast::message_cref& other)
  : base_type(other)
{
}

inline
StandardTrailer_cref::StandardTrailer_cref(
  const mfast::field_cref& other)
  : base_type(mfast::field_cref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
StandardTrailer_cref::operator mfast::message_cref()
{
  return mfast::message_cref(this->storage(), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void StandardTrailer_cref::accept(Visitor& )
{
  using namespace mfast;
}

inline
StandardTrailer_mref::StandardTrailer_mref()
  : base_type(nullptr, nullptr, nullptr)
{
}

template <typename T>inline
StandardTrailer_mref::StandardTrailer_mref(
  mfast::allocator* alloc,
  typename std::enable_if<std::is_same<typename T::cref_type, StandardTrailer_cref>::value, mfast::value_storage*>::type storage_array,
  const T*          instruction)
  : base_type(alloc, storage_array, instruction)
{
}

inline
StandardTrailer_mref::StandardTrailer_mref(
  const mfast::message_mref& other)
  : base_type(other)
{
}

inline
StandardTrailer_mref::StandardTrailer_mref(
  const mfast::field_mref_base& other)
  : base_type(other.allocator(),
              mfast::field_mref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
StandardTrailer_mref::operator mfast::message_mref()
{
  return mfast::message_mref(this->allocator(), const_cast<mfast::value_storage*>(this->storage()), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void StandardTrailer_mref::accept(Visitor& )
{
  using namespace mfast;
}

inline
StandardTrailer::StandardTrailer(
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
}

inline
StandardTrailer::StandardTrailer(
  const StandardTrailer_cref& other,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data(), other.field_storage(0))
{
}

#ifdef MFAST_JSON_H
StandardTrailer::StandardTrailer(
  const char* json_initializer,
  int json_object_tag_mask,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
  std::stringstream strm(json_initializer);
  mfast::json::decode(strm, this->mref(), json_object_tag_mask);
}

#endif
inline StandardTrailer::cref_type
StandardTrailer::ref() const
{
  return StandardTrailer::cref_type(my_storage_.of_group.content_, instruction());
}

inline StandardTrailer::cref_type
StandardTrailer::cref() const
{
  return StandardTrailer::cref_type(my_storage_.of_group.content_, instruction());
}

inline StandardTrailer::mref_type
StandardTrailer::ref()
{
  return StandardTrailer::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline StandardTrailer::mref_type
StandardTrailer::mref()
{
  return StandardTrailer::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline
MDRefreshSample_cref::MDRefreshSample_cref()
  : base_type(nullptr, nullptr)
{
}

template <typename T>inline
MDRefreshSample_cref::MDRefreshSample_cref(
  typename std::enable_if<std::is_same<typename T::cref_type, MDRefreshSample_cref>::value, const mfast::value_storage*>::type storage_array,
  const T* instruction)
  : base_type(storage_array, instruction)
{
}

inline
MDRefreshSample_cref::MDRefreshSample_cref(
  const mfast::message_cref& other)
  : base_type(other)
{
}

inline
MDRefreshSample_cref::MDRefreshSample_cref(
  const mfast::field_cref& other)
  : base_type(mfast::field_cref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDRefreshSample_cref::operator mfast::message_cref()
{
  return mfast::message_cref(this->storage(), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDRefreshSample_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref< info_cref,  group_type_tag, properties_type< 4> > ((*this)[0]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 0> >, ext_cref< typename MDEntries_cref::reference, sequence_element_tag,properties_type< 22> > > ((*this)[1]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 0> >, ext_cref< typename extra_cref::reference, none_operator_tag, properties_type< 0>  > > ((*this)[2]) );
}

inline
MDRefreshSample_mref::MDRefreshSample_mref()
  : base_type(nullptr, nullptr, nullptr)
{
}

template <typename T>inline
MDRefreshSample_mref::MDRefreshSample_mref(
  mfast::allocator* alloc,
  typename std::enable_if<std::is_same<typename T::cref_type, MDRefreshSample_cref>::value, mfast::value_storage*>::type storage_array,
  const T*          instruction)
  : base_type(alloc, storage_array, instruction)
{
}

inline
MDRefreshSample_mref::MDRefreshSample_mref(
  const mfast::message_mref& other)
  : base_type(other)
{
}

inline
MDRefreshSample_mref::MDRefreshSample_mref(
  const mfast::field_mref_base& other)
  : base_type(other.allocator(),
              mfast::field_mref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MDRefreshSample_mref::operator mfast::message_mref()
{
  return mfast::message_mref(this->allocator(), const_cast<mfast::value_storage*>(this->storage()), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MDRefreshSample_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref< info_mref, group_type_tag, properties_type< 4> > ((*this)[0]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 0> >, ext_mref< typename MDEntries_mref::reference, sequence_element_tag,properties_type< 22> > > ((*this)[1]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 0> >, ext_mref< typename extra_mref::reference, none_operator_tag, properties_type< 0>  > > ((*this)[2]) );
}

inline
MDRefreshSample::MDRefreshSample(
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
}

inline
MDRefreshSample::MDRefreshSample(
  const MDRefreshSample_cref& other,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data(), other.field_storage(0))
{
}

#ifdef MFAST_JSON_H
MDRefreshSample::MDRefreshSample(
  const char* json_initializer,
  int json_object_tag_mask,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
  std::stringstream strm(json_initializer);
  mfast::json::decode(strm, this->mref(), json_object_tag_mask);
}

#endif
inline MDRefreshSample::cref_type
MDRefreshSample::ref() const
{
  return MDRefreshSample::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDRefreshSample::cref_type
MDRefreshSample::cref() const
{
  return MDRefreshSample::cref_type(my_storage_.of_group.content_, instruction());
}

inline MDRefreshSample::mref_type
MDRefreshSample::ref()
{
  return MDRefreshSample::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline MDRefreshSample::mref_type
MDRefreshSample::mref()
{
  return MDRefreshSample::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}


inline MDRefreshSample_cref::info_cref
MDRefreshSample_cref::get_info() const
{
  return static_cast<MDRefreshSample_cref::info_cref>((*this)[0]);
}


inline MDRefreshSample_cref::info_cref
MDRefreshSample_cref::try_get_info() const
{
  return static_cast<MDRefreshSample_cref::info_cref>((*this)[0]);
}

inline MDRefreshSample_mref::info_mref
MDRefreshSample_mref::set_info() const
{
  return MDRefreshSample_mref::info_mref((*this)[0]);
}

inline void
MDRefreshSample_mref::link_info(const MDRefreshSample_mref::info_mref& ref) const
{
  this->link_group_at(0, ref);
}

inline void
MDRefreshSample_mref::unlink_info() const
{
  this->unlink_group_at(0);
}

inline MDRefreshSample_cref::MDEntries_cref
MDRefreshSample_cref::get_MDEntries() const
{
  return static_cast<MDRefreshSample_cref::MDEntries_cref>((*this)[1]);
}

inline MDRefreshSample_cref::MDEntries_cref
MDRefreshSample_cref::try_get_MDEntries() const
{
  return static_cast<MDRefreshSample_cref::MDEntries_cref>((*this)[1]);
}

inline MDRefreshSample_mref::MDEntries_mref
MDRefreshSample_mref::set_MDEntries() const
{
  return static_cast<MDRefreshSample_mref::MDEntries_mref>((*this)[1]);
}

inline
MDRefreshSample_cref::MDEntries_element_cref::MDEntries_element_cref(
  const mfast::value_storage*   storage,
  MDRefreshSample_cref::MDEntries_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MDRefreshSample_mref::MDEntries_element_mref::MDEntries_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MDRefreshSample_mref::MDEntries_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MDRefreshSample_cref::MDEntries_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_cref<ascii_string_cref, copy_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_cref<ascii_string_cref, copy_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_cref<ascii_string_cref, copy_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_cref<decimal_cref, delta_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<copy_operator_tag, delta_operator_tag>, std::tuple<properties_type< 2> , properties_type< 2> > > ((*this)[5]) );
  visitor.visit(ext_cref<uint32_cref, delta_operator_tag, properties_type< 0> > ((*this)[6]) );
  visitor.visit(ext_cref<ascii_string_cref, copy_operator_tag, properties_type< 0> > ((*this)[7]) );
  visitor.visit(ext_cref<ascii_string_cref, copy_operator_tag, properties_type< 0> > ((*this)[8]) );
  visitor.visit(ext_cref<unicode_string_cref, copy_operator_tag, properties_type< 1> > ((*this)[9]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 3> > ((*this)[10]) );
  visitor.visit(ext_cref<unicode_string_cref, copy_operator_tag, properties_type< 0> > ((*this)[11]) );
  visitor.visit(ext_cref<byte_vector_cref, copy_operator_tag, properties_type< 0> > ((*this)[12]) );
}

template <typename Visitor>
inline void MDRefreshSample_mref::MDEntries_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 0> > ((*this)[0]) );
  visitor.visit(ext_mref<ascii_string_mref, copy_operator_tag, properties_type< 0> > ((*this)[1]) );
  visitor.visit(ext_mref<ascii_string_mref, copy_operator_tag, properties_type< 0> > ((*this)[2]) );
  visitor.visit(ext_mref<ascii_string_mref, copy_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_mref<decimal_mref, delta_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<copy_operator_tag, delta_operator_tag>, std::tuple<properties_type< 2> , properties_type< 2> > > ((*this)[5]) );
  visitor.visit(ext_mref<uint32_mref, delta_operator_tag, properties_type< 0> > ((*this)[6]) );
  visitor.visit(ext_mref<ascii_string_mref, copy_operator_tag, properties_type< 0> > ((*this)[7]) );
  visitor.visit(ext_mref<ascii_string_mref, copy_operator_tag, properties_type< 0> > ((*this)[8]) );
  visitor.visit(ext_mref<unicode_string_mref, copy_operator_tag, properties_type< 1> > ((*this)[9]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 3> > ((*this)[10]) );
  visitor.visit(ext_mref<unicode_string_mref, copy_operator_tag, properties_type< 0> > ((*this)[11]) );
  visitor.visit(ext_mref<byte_vector_mref, copy_operator_tag, properties_type< 0> > ((*this)[12]) );
}

inline mfast::uint32_cref
MDRefreshSample_cref::MDEntries_element_cref::get_MDUpdateAction() const
{
  return static_cast<mfast::uint32_cref>((*this)[0]);
}

inline mfast::uint32_cref
MDRefreshSample_cref::MDEntries_element_cref::try_get_MDUpdateAction() const
{
  return static_cast<mfast::uint32_cref>((*this)[0]);
}

inline mfast::uint32_mref
MDRefreshSample_mref::MDEntries_element_mref::set_MDUpdateAction() const
{
  return static_cast<mfast::uint32_mref>((*this)[0]);
}

inline mfast::ascii_string_cref
MDRefreshSample_cref::MDEntries_element_cref::get_MDEntryType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDRefreshSample_cref::MDEntries_element_cref::try_get_MDEntryType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_mref
MDRefreshSample_mref::MDEntries_element_mref::set_MDEntryType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[1]);
}

inline mfast::ascii_string_cref
MDRefreshSample_cref::MDEntries_element_cref::get_Symbol() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_cref
MDRefreshSample_cref::MDEntries_element_cref::try_get_Symbol() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_mref
MDRefreshSample_mref::MDEntries_element_mref::set_Symbol() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[2]);
}

inline mfast::ascii_string_cref
MDRefreshSample_cref::MDEntries_element_cref::get_SecurityType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[3]);
}

inline mfast::ascii_string_cref
MDRefreshSample_cref::MDEntries_element_cref::try_get_SecurityType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[3]);
}

inline mfast::ascii_string_mref
MDRefreshSample_mref::MDEntries_element_mref::set_SecurityType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[3]);
}

inline mfast::decimal_cref
MDRefreshSample_cref::MDEntries_element_cref::get_MDEntryPx() const
{
  return static_cast<mfast::decimal_cref>((*this)[4]);
}

inline mfast::decimal_cref
MDRefreshSample_cref::MDEntries_element_cref::try_get_MDEntryPx() const
{
  return static_cast<mfast::decimal_cref>((*this)[4]);
}

inline mfast::decimal_mref
MDRefreshSample_mref::MDEntries_element_mref::set_MDEntryPx() const
{
  return static_cast<mfast::decimal_mref>((*this)[4]);
}

inline mfast::decimal_cref
MDRefreshSample_cref::MDEntries_element_cref::get_MDEntrySize() const
{
  return static_cast<mfast::decimal_cref>((*this)[5]);
}

inline mfast::decimal_cref
MDRefreshSample_cref::MDEntries_element_cref::try_get_MDEntrySize() const
{
  return static_cast<mfast::decimal_cref>((*this)[5]);
}

inline mfast::decimal_mref
MDRefreshSample_mref::MDEntries_element_mref::set_MDEntrySize() const
{
  return static_cast<mfast::decimal_mref>((*this)[5]);
}

inline mfast::uint32_cref
MDRefreshSample_cref::MDEntries_element_cref::get_NumberOfOrders() const
{
  return static_cast<mfast::uint32_cref>((*this)[6]);
}

inline mfast::uint32_cref
MDRefreshSample_cref::MDEntries_element_cref::try_get_NumberOfOrders() const
{
  return static_cast<mfast::uint32_cref>((*this)[6]);
}

inline mfast::uint32_mref
MDRefreshSample_mref::MDEntries_element_mref::set_NumberOfOrders() const
{
  return static_cast<mfast::uint32_mref>((*this)[6]);
}

inline mfast::ascii_string_cref
MDRefreshSample_cref::MDEntries_element_cref::get_QuoteCondition() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[7]);
}

inline mfast::ascii_string_cref
MDRefreshSample_cref::MDEntries_element_cref::try_get_QuoteCondition() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[7]);
}

inline mfast::ascii_string_mref
MDRefreshSample_mref::MDEntries_element_mref::set_QuoteCondition() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[7]);
}

inline mfast::ascii_string_cref
MDRefreshSample_cref::MDEntries_element_cref::get_TradeCondition() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[8]);
}

inline mfast::ascii_string_cref
MDRefreshSample_cref::MDEntries_element_cref::try_get_TradeCondition() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[8]);
}

inline mfast::ascii_string_mref
MDRefreshSample_mref::MDEntries_element_mref::set_TradeCondition() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[8]);
}

inline mfast::unicode_string_cref
MDRefreshSample_cref::MDEntries_element_cref::get_SecurityID() const
{
  return static_cast<mfast::unicode_string_cref>((*this)[9]);
}

inline mfast::unicode_string_cref
MDRefreshSample_cref::MDEntries_element_cref::try_get_SecurityID() const
{
  if ((*this)[9].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::unicode_string_cref>((*this)[9]);
}

inline mfast::unicode_string_mref
MDRefreshSample_mref::MDEntries_element_mref::set_SecurityID() const
{
  return static_cast<mfast::unicode_string_mref>((*this)[9]);
}

inline
void
MDRefreshSample_mref::MDEntries_element_mref::omit_SecurityID() const
{
  (*this)[9].omit();
}

inline mfast::ascii_string_cref
MDRefreshSample_cref::MDEntries_element_cref::get_OrderStatus() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[10]);
}

inline mfast::ascii_string_cref
MDRefreshSample_cref::MDEntries_element_cref::try_get_OrderStatus() const
{
  if ((*this)[10].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[10]);
}

inline mfast::ascii_string_mref
MDRefreshSample_mref::MDEntries_element_mref::set_OrderStatus() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[10]);
}

inline
void
MDRefreshSample_mref::MDEntries_element_mref::omit_OrderStatus() const
{
  (*this)[10].omit();
}

inline mfast::unicode_string_cref
MDRefreshSample_cref::MDEntries_element_cref::get_EncodedIssuer() const
{
  return static_cast<mfast::unicode_string_cref>((*this)[11]);
}

inline mfast::unicode_string_cref
MDRefreshSample_cref::MDEntries_element_cref::try_get_EncodedIssuer() const
{
  return static_cast<mfast::unicode_string_cref>((*this)[11]);
}

inline mfast::unicode_string_mref
MDRefreshSample_mref::MDEntries_element_mref::set_EncodedIssuer() const
{
  return static_cast<mfast::unicode_string_mref>((*this)[11]);
}

inline mfast::byte_vector_cref
MDRefreshSample_cref::MDEntries_element_cref::get_EncodedSecurityDesc() const
{
  return static_cast<mfast::byte_vector_cref>((*this)[12]);
}

inline mfast::byte_vector_cref
MDRefreshSample_cref::MDEntries_element_cref::try_get_EncodedSecurityDesc() const
{
  return static_cast<mfast::byte_vector_cref>((*this)[12]);
}

inline mfast::byte_vector_mref
MDRefreshSample_mref::MDEntries_element_mref::set_EncodedSecurityDesc() const
{
  return static_cast<mfast::byte_vector_mref>((*this)[12]);
}

inline MDRefreshSample_cref::extra_cref
MDRefreshSample_cref::get_extra() const
{
  return static_cast<MDRefreshSample_cref::extra_cref>((*this)[2]);
}

inline MDRefreshSample_cref::extra_cref
MDRefreshSample_cref::try_get_extra() const
{
  return static_cast<MDRefreshSample_cref::extra_cref>((*this)[2]);
}

inline MDRefreshSample_mref::extra_mref
MDRefreshSample_mref::set_extra() const
{
  return static_cast<MDRefreshSample_mref::extra_mref>((*this)[2]);
}

inline
_0_cref::_0_cref()
  : base_type(nullptr, nullptr)
{
}

template <typename T>inline
_0_cref::_0_cref(
  typename std::enable_if<std::is_same<typename T::cref_type, _0_cref>::value, const mfast::value_storage*>::type storage_array,
  const T* instruction)
  : base_type(storage_array, instruction)
{
}

inline
_0_cref::_0_cref(
  const mfast::message_cref& other)
  : base_type(other)
{
}

inline
_0_cref::_0_cref(
  const mfast::field_cref& other)
  : base_type(mfast::field_cref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
_0_cref::operator mfast::message_cref()
{
  return mfast::message_cref(this->storage(), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void _0_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_cref<uint32_cref, increment_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_cref<uint64_cref, copy_operator_tag, properties_type< 0> > ((*this)[4]) );
}

inline
_0_mref::_0_mref()
  : base_type(nullptr, nullptr, nullptr)
{
}

template <typename T>inline
_0_mref::_0_mref(
  mfast::allocator* alloc,
  typename std::enable_if<std::is_same<typename T::cref_type, _0_cref>::value, mfast::value_storage*>::type storage_array,
  const T*          instruction)
  : base_type(alloc, storage_array, instruction)
{
}

inline
_0_mref::_0_mref(
  const mfast::message_mref& other)
  : base_type(other)
{
}

inline
_0_mref::_0_mref(
  const mfast::field_mref_base& other)
  : base_type(other.allocator(),
              mfast::field_mref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
_0_mref::operator mfast::message_mref()
{
  return mfast::message_mref(this->allocator(), const_cast<mfast::value_storage*>(this->storage()), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void _0_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_mref<uint32_mref, increment_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_mref<uint64_mref, copy_operator_tag, properties_type< 0> > ((*this)[4]) );
}

inline
_0::_0(
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
}

inline
_0::_0(
  const _0_cref& other,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data(), other.field_storage(0))
{
}

#ifdef MFAST_JSON_H
_0::_0(
  const char* json_initializer,
  int json_object_tag_mask,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
  std::stringstream strm(json_initializer);
  mfast::json::decode(strm, this->mref(), json_object_tag_mask);
}

#endif
inline _0::cref_type
_0::ref() const
{
  return _0::cref_type(my_storage_.of_group.content_, instruction());
}

inline _0::cref_type
_0::cref() const
{
  return _0::cref_type(my_storage_.of_group.content_, instruction());
}

inline _0::mref_type
_0::ref()
{
  return _0::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline _0::mref_type
_0::mref()
{
  return _0::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline mfast::ascii_string_cref
_0_cref::get_MessageType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
_0_cref::try_get_MessageType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
_0_cref::get_BeginString() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
_0_cref::try_get_BeginString() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
_0_cref::get_SenderCompID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_cref
_0_cref::try_get_SenderCompID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::uint32_cref
_0_cref::get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[3]);
}

inline mfast::uint32_cref
_0_cref::try_get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[3]);
}

inline mfast::uint32_mref
_0_mref::set_MsgSeqNum() const
{
  return static_cast<mfast::uint32_mref>((*this)[3]);
}

inline mfast::uint64_cref
_0_cref::get_SendingTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[4]);
}

inline mfast::uint64_cref
_0_cref::try_get_SendingTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[4]);
}

inline mfast::uint64_mref
_0_mref::set_SendingTime() const
{
  return static_cast<mfast::uint64_mref>((*this)[4]);
}

inline
With_dash_cref::With_dash_cref()
  : base_type(nullptr, nullptr)
{
}

template <typename T>inline
With_dash_cref::With_dash_cref(
  typename std::enable_if<std::is_same<typename T::cref_type, With_dash_cref>::value, const mfast::value_storage*>::type storage_array,
  const T* instruction)
  : base_type(storage_array, instruction)
{
}

inline
With_dash_cref::With_dash_cref(
  const mfast::message_cref& other)
  : base_type(other)
{
}

inline
With_dash_cref::With_dash_cref(
  const mfast::field_cref& other)
  : base_type(mfast::field_cref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
With_dash_cref::operator mfast::message_cref()
{
  return mfast::message_cref(this->storage(), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void With_dash_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_cref<uint32_cref, increment_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_cref<uint64_cref, copy_operator_tag, properties_type< 0> > ((*this)[4]) );
}

inline
With_dash_mref::With_dash_mref()
  : base_type(nullptr, nullptr, nullptr)
{
}

template <typename T>inline
With_dash_mref::With_dash_mref(
  mfast::allocator* alloc,
  typename std::enable_if<std::is_same<typename T::cref_type, With_dash_cref>::value, mfast::value_storage*>::type storage_array,
  const T*          instruction)
  : base_type(alloc, storage_array, instruction)
{
}

inline
With_dash_mref::With_dash_mref(
  const mfast::message_mref& other)
  : base_type(other)
{
}

inline
With_dash_mref::With_dash_mref(
  const mfast::field_mref_base& other)
  : base_type(other.allocator(),
              mfast::field_mref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
With_dash_mref::operator mfast::message_mref()
{
  return mfast::message_mref(this->allocator(), const_cast<mfast::value_storage*>(this->storage()), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void With_dash_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_mref<uint32_mref, increment_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_mref<uint64_mref, copy_operator_tag, properties_type< 0> > ((*this)[4]) );
}

inline
With_dash::With_dash(
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
}

inline
With_dash::With_dash(
  const With_dash_cref& other,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data(), other.field_storage(0))
{
}

#ifdef MFAST_JSON_H
With_dash::With_dash(
  const char* json_initializer,
  int json_object_tag_mask,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
  std::stringstream strm(json_initializer);
  mfast::json::decode(strm, this->mref(), json_object_tag_mask);
}

#endif
inline With_dash::cref_type
With_dash::ref() const
{
  return With_dash::cref_type(my_storage_.of_group.content_, instruction());
}

inline With_dash::cref_type
With_dash::cref() const
{
  return With_dash::cref_type(my_storage_.of_group.content_, instruction());
}

inline With_dash::mref_type
With_dash::ref()
{
  return With_dash::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline With_dash::mref_type
With_dash::mref()
{
  return With_dash::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline mfast::ascii_string_cref
With_dash_cref::get_MessageType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
With_dash_cref::try_get_MessageType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
With_dash_cref::get_BeginString() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
With_dash_cref::try_get_BeginString() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
With_dash_cref::get_SenderCompID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_cref
With_dash_cref::try_get_SenderCompID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::uint32_cref
With_dash_cref::get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[3]);
}

inline mfast::uint32_cref
With_dash_cref::try_get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[3]);
}

inline mfast::uint32_mref
With_dash_mref::set_MsgSeqNum() const
{
  return static_cast<mfast::uint32_mref>((*this)[3]);
}

inline mfast::uint64_cref
With_dash_cref::get_SendingTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[4]);
}

inline mfast::uint64_cref
With_dash_cref::try_get_SendingTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[4]);
}

inline mfast::uint64_mref
With_dash_mref::set_SendingTime() const
{
  return static_cast<mfast::uint64_mref>((*this)[4]);
}

