// MDRefreshSample.h generated by mFAST from FAST Template. 
// Do not modify this file directly. Any modifications 
// will be lost the next time this file is generated.

#pragma once

#include <mfast.h>
namespace MDRefreshSample
{

class MDRefreshSample_cref
  : public mfast::aggregate_cref
{
  typedef mfast::aggregate_cref base_type;
  public:
    typedef mfast::template_instruction_ex<MDRefreshSample_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDRefreshSample_cref();
    template <typename T>
    MDRefreshSample_cref(
      typename std::enable_if<std::is_same<typename T::cref_type, MDRefreshSample_cref>::value, const mfast::value_storage*>::type storage,
      const T* instruction);

    MDRefreshSample_cref(const mfast::message_cref& other);

    explicit MDRefreshSample_cref(const mfast::field_cref& other);

    operator mfast::message_cref();
    template <typename Visitor>
    void accept(Visitor& v);

    mfast::ascii_string_cref get_BeginString() const;
    mfast::ascii_string_cref try_get_BeginString() const;
    mfast::ascii_string_cref get_MessageType() const;
    mfast::ascii_string_cref try_get_MessageType() const;
    mfast::ascii_string_cref get_SenderCompID() const;
    mfast::ascii_string_cref try_get_SenderCompID() const;
    mfast::uint32_cref get_MsgSeqNum() const;
    mfast::uint32_cref try_get_MsgSeqNum() const;

    class MDEntries_element_cref
      : public mfast::sequence_element_cref
    {
      typedef mfast::sequence_element_cref base_type;
      public:
        typedef mfast::sequence_instruction_ex<MDEntries_element_cref> instruction_type;
        typedef const instruction_type* instruction_cptr;
        MDEntries_element_cref(
          const mfast::value_storage* storage,
          instruction_cptr            instruction);

        template <typename Visitor>
        void accept(Visitor& v);

        mfast::uint32_cref get_MDUpdateAction() const;
        mfast::uint32_cref try_get_MDUpdateAction() const;
        mfast::ascii_string_cref get_MDEntryType() const;
        mfast::ascii_string_cref try_get_MDEntryType() const;
        mfast::ascii_string_cref get_Symbol() const;
        mfast::ascii_string_cref try_get_Symbol() const;
        mfast::ascii_string_cref get_SecurityType() const;
        mfast::ascii_string_cref try_get_SecurityType() const;
        mfast::decimal_cref get_MDEntryPx() const;
        mfast::decimal_cref try_get_MDEntryPx() const;
        mfast::decimal_cref get_MDEntrySize() const;
        mfast::decimal_cref try_get_MDEntrySize() const;
        mfast::uint32_cref get_NumberOfOrders() const;
        mfast::uint32_cref try_get_NumberOfOrders() const;
        mfast::ascii_string_cref get_QuoteCondition() const;
        mfast::ascii_string_cref try_get_QuoteCondition() const;
        mfast::ascii_string_cref get_TradeCondition() const;
        mfast::ascii_string_cref try_get_TradeCondition() const;
    };

    typedef mfast::make_sequence_cref<MDEntries_element_cref> MDEntries_cref;
    MDEntries_cref get_MDEntries() const;
    MDEntries_cref try_get_MDEntries() const;

};


typedef mfast::make_aggregate_mref<MDRefreshSample_cref> MDRefreshSample_mref_base;
class MDRefreshSample_mref
  : public MDRefreshSample_mref_base
{
  typedef MDRefreshSample_mref_base base_type;
  public:
    typedef mfast::template_instruction_ex<MDRefreshSample_cref> instruction_type;
    typedef const instruction_type* instruction_cptr;
    MDRefreshSample_mref();
    template <typename T>
    MDRefreshSample_mref(
      mfast::allocator*       alloc,
      typename std::enable_if<std::is_same<typename T::cref_type, MDRefreshSample_cref>::value, mfast::value_storage*>::type   storage,
      const T* instruction);

    MDRefreshSample_mref(const mfast::message_mref& other);

    operator mfast::message_mref();
    explicit MDRefreshSample_mref(const mfast::field_mref_base& other);

    template <typename Visitor>
    void accept(Visitor& v);

    mfast::ascii_string_mref set_SenderCompID() const;
    mfast::uint32_mref set_MsgSeqNum() const;

    class MDEntries_element_mref
      : public mfast::make_aggregate_mref<MDRefreshSample_cref::MDEntries_element_cref>
    {
      typedef mfast::make_aggregate_mref<MDRefreshSample_cref::MDEntries_element_cref> base_type;
      public:
        MDEntries_element_mref(
          mfast::allocator*     alloc,
          mfast::value_storage* storage,
          instruction_cptr      instruction);

        template <typename Visitor>
        void accept(Visitor& v);

        mfast::uint32_mref set_MDUpdateAction() const;
        mfast::ascii_string_mref set_MDEntryType() const;
        mfast::ascii_string_mref set_Symbol() const;
        mfast::ascii_string_mref set_SecurityType() const;
        mfast::decimal_mref set_MDEntryPx() const;
        mfast::decimal_mref set_MDEntrySize() const;
        mfast::uint32_mref set_NumberOfOrders() const;
        mfast::ascii_string_mref set_QuoteCondition() const;
        mfast::ascii_string_mref set_TradeCondition() const;
    };

    typedef mfast::make_sequence_mref<MDEntries_element_mref> MDEntries_mref;
    MDEntries_mref set_MDEntries() const;
};

class MDRefreshSample
  : private mfast::value_storage_array<5>
  , public mfast::message_type
{
  typedef mfast::message_type base_type;
  public:
    enum {
      the_id = 0
    };
    typedef mfast::template_instruction_ex<MDRefreshSample_cref> instruction_type;

    typedef mfast::make_message_cref<MDRefreshSample_cref, instruction_type> cref_type;
    typedef mfast::make_message_mref<MDRefreshSample_mref, instruction_type> mref_type;
    MDRefreshSample(
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
    MDRefreshSample(
      const MDRefreshSample_cref& other,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#ifdef MFAST_JSON_H
    explicit MDRefreshSample(
      const char* json_initializer,
      int json_object_tag_mask=0,
      mfast::allocator* alloc=mfast::malloc_allocator::instance());
#endif // MFAST_JSON_H
    cref_type ref() const;
    cref_type cref() const;
    mref_type ref();
    mref_type mref();
    static const instruction_type* instruction();
  private:
    MDRefreshSample(const MDRefreshSample&);
    MDRefreshSample& operator = (const MDRefreshSample&);
};


struct  templates_description
  : mfast::templates_description
{
  typedef std::tuple<> types;
  templates_description();
  static const templates_description* instance();
};

inline const templates_description* description()
{
  return templates_description::instance();
}

#include "MDRefreshSample.inl"
}
