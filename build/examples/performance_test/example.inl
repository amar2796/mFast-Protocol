// example.inl generated by mFAST from FAST Template. 
// Do not modify this file directly. Any modifications 
// will be lost the next time this file is generated.

inline
Done_cref::Done_cref()
  : base_type(nullptr, nullptr)
{
}

template <typename T>inline
Done_cref::Done_cref(
  typename std::enable_if<std::is_same<typename T::cref_type, Done_cref>::value, const mfast::value_storage*>::type storage_array,
  const T* instruction)
  : base_type(storage_array, instruction)
{
}

inline
Done_cref::Done_cref(
  const mfast::message_cref& other)
  : base_type(other)
{
}

inline
Done_cref::Done_cref(
  const mfast::field_cref& other)
  : base_type(mfast::field_cref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
Done_cref::operator mfast::message_cref()
{
  return mfast::message_cref(this->storage(), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void Done_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
}

inline
Done_mref::Done_mref()
  : base_type(nullptr, nullptr, nullptr)
{
}

template <typename T>inline
Done_mref::Done_mref(
  mfast::allocator* alloc,
  typename std::enable_if<std::is_same<typename T::cref_type, Done_cref>::value, mfast::value_storage*>::type storage_array,
  const T*          instruction)
  : base_type(alloc, storage_array, instruction)
{
}

inline
Done_mref::Done_mref(
  const mfast::message_mref& other)
  : base_type(other)
{
}

inline
Done_mref::Done_mref(
  const mfast::field_mref_base& other)
  : base_type(other.allocator(),
              mfast::field_mref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
Done_mref::operator mfast::message_mref()
{
  return mfast::message_mref(this->allocator(), const_cast<mfast::value_storage*>(this->storage()), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void Done_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
}

inline
Done::Done(
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
}

inline
Done::Done(
  const Done_cref& other,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data(), other.field_storage(0))
{
}

#ifdef MFAST_JSON_H
Done::Done(
  const char* json_initializer,
  int json_object_tag_mask,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
  std::stringstream strm(json_initializer);
  mfast::json::decode(strm, this->mref(), json_object_tag_mask);
}

#endif
inline Done::cref_type
Done::ref() const
{
  return Done::cref_type(my_storage_.of_group.content_, instruction());
}

inline Done::cref_type
Done::cref() const
{
  return Done::cref_type(my_storage_.of_group.content_, instruction());
}

inline Done::mref_type
Done::ref()
{
  return Done::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline Done::mref_type
Done::mref()
{
  return Done::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline mfast::ascii_string_cref
Done_cref::get_MessageType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
Done_cref::try_get_MessageType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline
MarketData_cref::MarketData_cref()
  : base_type(nullptr, nullptr)
{
}

template <typename T>inline
MarketData_cref::MarketData_cref(
  typename std::enable_if<std::is_same<typename T::cref_type, MarketData_cref>::value, const mfast::value_storage*>::type storage_array,
  const T* instruction)
  : base_type(storage_array, instruction)
{
}

inline
MarketData_cref::MarketData_cref(
  const mfast::message_cref& other)
  : base_type(other)
{
}

inline
MarketData_cref::MarketData_cref(
  const mfast::field_cref& other)
  : base_type(mfast::field_cref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MarketData_cref::operator mfast::message_cref()
{
  return mfast::message_cref(this->storage(), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MarketData_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[5]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 0> >, ext_cref< typename MDEntries_cref::reference, sequence_element_tag,properties_type< 30> > > ((*this)[6]) );
}

inline
MarketData_mref::MarketData_mref()
  : base_type(nullptr, nullptr, nullptr)
{
}

template <typename T>inline
MarketData_mref::MarketData_mref(
  mfast::allocator* alloc,
  typename std::enable_if<std::is_same<typename T::cref_type, MarketData_cref>::value, mfast::value_storage*>::type storage_array,
  const T*          instruction)
  : base_type(alloc, storage_array, instruction)
{
}

inline
MarketData_mref::MarketData_mref(
  const mfast::message_mref& other)
  : base_type(other)
{
}

inline
MarketData_mref::MarketData_mref(
  const mfast::field_mref_base& other)
  : base_type(other.allocator(),
              mfast::field_mref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
MarketData_mref::operator mfast::message_mref()
{
  return mfast::message_mref(this->allocator(), const_cast<mfast::value_storage*>(this->storage()), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void MarketData_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[5]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 0> >, ext_mref< typename MDEntries_mref::reference, sequence_element_tag,properties_type< 30> > > ((*this)[6]) );
}

inline
MarketData::MarketData(
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
}

inline
MarketData::MarketData(
  const MarketData_cref& other,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data(), other.field_storage(0))
{
}

#ifdef MFAST_JSON_H
MarketData::MarketData(
  const char* json_initializer,
  int json_object_tag_mask,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
  std::stringstream strm(json_initializer);
  mfast::json::decode(strm, this->mref(), json_object_tag_mask);
}

#endif
inline MarketData::cref_type
MarketData::ref() const
{
  return MarketData::cref_type(my_storage_.of_group.content_, instruction());
}

inline MarketData::cref_type
MarketData::cref() const
{
  return MarketData::cref_type(my_storage_.of_group.content_, instruction());
}

inline MarketData::mref_type
MarketData::ref()
{
  return MarketData::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline MarketData::mref_type
MarketData::mref()
{
  return MarketData::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline mfast::ascii_string_cref
MarketData_cref::get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MarketData_cref::try_get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
MarketData_cref::get_MessageType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
MarketData_cref::try_get_MessageType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
MarketData_cref::get_SenderCompID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_cref
MarketData_cref::try_get_SenderCompID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::uint32_cref
MarketData_cref::get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[3]);
}

inline mfast::uint32_cref
MarketData_cref::try_get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[3]);
}

inline mfast::uint32_mref
MarketData_mref::set_MsgSeqNum() const
{
  return static_cast<mfast::uint32_mref>((*this)[3]);
}

inline mfast::uint32_cref
MarketData_cref::get_SendingTime() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_cref
MarketData_cref::try_get_SendingTime() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_mref
MarketData_mref::set_SendingTime() const
{
  return static_cast<mfast::uint32_mref>((*this)[4]);
}

inline mfast::uint32_cref
MarketData_cref::get_TradeDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[5]);
}

inline mfast::uint32_cref
MarketData_cref::try_get_TradeDate() const
{
  return static_cast<mfast::uint32_cref>((*this)[5]);
}

inline mfast::uint32_mref
MarketData_mref::set_TradeDate() const
{
  return static_cast<mfast::uint32_mref>((*this)[5]);
}

inline MarketData_cref::MDEntries_cref
MarketData_cref::get_MDEntries() const
{
  return static_cast<MarketData_cref::MDEntries_cref>((*this)[6]);
}

inline MarketData_cref::MDEntries_cref
MarketData_cref::try_get_MDEntries() const
{
  return static_cast<MarketData_cref::MDEntries_cref>((*this)[6]);
}

inline MarketData_mref::MDEntries_mref
MarketData_mref::set_MDEntries() const
{
  return static_cast<MarketData_mref::MDEntries_mref>((*this)[6]);
}

inline
MarketData_cref::MDEntries_element_cref::MDEntries_element_cref(
  const mfast::value_storage*   storage,
  MarketData_cref::MDEntries_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
MarketData_mref::MDEntries_element_mref::MDEntries_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  MarketData_mref::MDEntries_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void MarketData_cref::MDEntries_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 3> > ((*this)[1]) );
  visitor.visit(ext_cref<ascii_string_cref, copy_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 1> > ((*this)[3]) );
  visitor.visit(ext_cref<uint32_cref, constant_operator_tag, properties_type< 2> > ((*this)[4]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 0> > ((*this)[5]) );
  visitor.visit(ext_cref<uint32_cref, increment_operator_tag, properties_type< 0> > ((*this)[6]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 2> , properties_type< 2> > > ((*this)[7]) );
  visitor.visit(ext_cref<uint32_cref, copy_operator_tag, properties_type< 0> > ((*this)[8]) );
  visitor.visit(ext_cref<int32_cref, delta_operator_tag, properties_type< 1> > ((*this)[9]) );
  visitor.visit(ext_cref<uint32_cref, delta_operator_tag, properties_type< 1> > ((*this)[10]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 3> > ((*this)[11]) );
  visitor.visit(ext_cref<decimal_cref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[12]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[13]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[14]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[15]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 1> > ((*this)[16]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 1> > ((*this)[17]) );
  visitor.visit(ext_cref<ascii_string_cref, default_operator_tag, properties_type< 3> > ((*this)[18]) );
}

template <typename Visitor>
inline void MarketData_mref::MDEntries_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 3> > ((*this)[1]) );
  visitor.visit(ext_mref<ascii_string_mref, copy_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 1> > ((*this)[3]) );
  visitor.visit(ext_mref<uint32_mref, constant_operator_tag, properties_type< 2> > ((*this)[4]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 0> > ((*this)[5]) );
  visitor.visit(ext_mref<uint32_mref, increment_operator_tag, properties_type< 0> > ((*this)[6]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 2> , properties_type< 2> > > ((*this)[7]) );
  visitor.visit(ext_mref<uint32_mref, copy_operator_tag, properties_type< 0> > ((*this)[8]) );
  visitor.visit(ext_mref<int32_mref, delta_operator_tag, properties_type< 1> > ((*this)[9]) );
  visitor.visit(ext_mref<uint32_mref, delta_operator_tag, properties_type< 1> > ((*this)[10]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 3> > ((*this)[11]) );
  visitor.visit(ext_mref<decimal_mref, std::tuple<default_operator_tag, delta_operator_tag>, std::tuple<properties_type< 1> , properties_type< 2> > > ((*this)[12]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[13]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[14]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[15]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 1> > ((*this)[16]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 1> > ((*this)[17]) );
  visitor.visit(ext_mref<ascii_string_mref, default_operator_tag, properties_type< 3> > ((*this)[18]) );
}

inline mfast::uint32_cref
MarketData_cref::MDEntries_element_cref::get_MDUpdateAction() const
{
  return static_cast<mfast::uint32_cref>((*this)[0]);
}

inline mfast::uint32_cref
MarketData_cref::MDEntries_element_cref::try_get_MDUpdateAction() const
{
  return static_cast<mfast::uint32_cref>((*this)[0]);
}

inline mfast::uint32_mref
MarketData_mref::MDEntries_element_mref::set_MDUpdateAction() const
{
  return static_cast<mfast::uint32_mref>((*this)[0]);
}

inline mfast::uint32_cref
MarketData_cref::MDEntries_element_cref::get_MDPriceLevel() const
{
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_cref
MarketData_cref::MDEntries_element_cref::try_get_MDPriceLevel() const
{
  if ((*this)[1].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[1]);
}

inline mfast::uint32_mref
MarketData_mref::MDEntries_element_mref::set_MDPriceLevel() const
{
  return static_cast<mfast::uint32_mref>((*this)[1]);
}

inline
void
MarketData_mref::MDEntries_element_mref::omit_MDPriceLevel() const
{
  (*this)[1].omit();
}

inline mfast::ascii_string_cref
MarketData_cref::MDEntries_element_cref::get_MDEntryType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_cref
MarketData_cref::MDEntries_element_cref::try_get_MDEntryType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_mref
MarketData_mref::MDEntries_element_mref::set_MDEntryType() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[2]);
}

inline mfast::uint32_cref
MarketData_cref::MDEntries_element_cref::get_OpenCloseSettleFlag() const
{
  return static_cast<mfast::uint32_cref>((*this)[3]);
}

inline mfast::uint32_cref
MarketData_cref::MDEntries_element_cref::try_get_OpenCloseSettleFlag() const
{
  if ((*this)[3].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[3]);
}

inline mfast::uint32_mref
MarketData_mref::MDEntries_element_mref::set_OpenCloseSettleFlag() const
{
  return static_cast<mfast::uint32_mref>((*this)[3]);
}

inline
void
MarketData_mref::MDEntries_element_mref::omit_OpenCloseSettleFlag() const
{
  (*this)[3].omit();
}

inline mfast::uint32_cref
MarketData_cref::MDEntries_element_cref::get_SecurityIDSource() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_cref
MarketData_cref::MDEntries_element_cref::try_get_SecurityIDSource() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_cref
MarketData_cref::MDEntries_element_cref::get_SecurityID() const
{
  return static_cast<mfast::uint32_cref>((*this)[5]);
}

inline mfast::uint32_cref
MarketData_cref::MDEntries_element_cref::try_get_SecurityID() const
{
  return static_cast<mfast::uint32_cref>((*this)[5]);
}

inline mfast::uint32_mref
MarketData_mref::MDEntries_element_mref::set_SecurityID() const
{
  return static_cast<mfast::uint32_mref>((*this)[5]);
}

inline mfast::uint32_cref
MarketData_cref::MDEntries_element_cref::get_RptSeq() const
{
  return static_cast<mfast::uint32_cref>((*this)[6]);
}

inline mfast::uint32_cref
MarketData_cref::MDEntries_element_cref::try_get_RptSeq() const
{
  return static_cast<mfast::uint32_cref>((*this)[6]);
}

inline mfast::uint32_mref
MarketData_mref::MDEntries_element_mref::set_RptSeq() const
{
  return static_cast<mfast::uint32_mref>((*this)[6]);
}

inline mfast::decimal_cref
MarketData_cref::MDEntries_element_cref::get_MDEntryPx() const
{
  return static_cast<mfast::decimal_cref>((*this)[7]);
}

inline mfast::decimal_cref
MarketData_cref::MDEntries_element_cref::try_get_MDEntryPx() const
{
  return static_cast<mfast::decimal_cref>((*this)[7]);
}

inline mfast::decimal_mref
MarketData_mref::MDEntries_element_mref::set_MDEntryPx() const
{
  return static_cast<mfast::decimal_mref>((*this)[7]);
}

inline mfast::uint32_cref
MarketData_cref::MDEntries_element_cref::get_MDEntryTime() const
{
  return static_cast<mfast::uint32_cref>((*this)[8]);
}

inline mfast::uint32_cref
MarketData_cref::MDEntries_element_cref::try_get_MDEntryTime() const
{
  return static_cast<mfast::uint32_cref>((*this)[8]);
}

inline mfast::uint32_mref
MarketData_mref::MDEntries_element_mref::set_MDEntryTime() const
{
  return static_cast<mfast::uint32_mref>((*this)[8]);
}

inline mfast::int32_cref
MarketData_cref::MDEntries_element_cref::get_MDEntrySize() const
{
  return static_cast<mfast::int32_cref>((*this)[9]);
}

inline mfast::int32_cref
MarketData_cref::MDEntries_element_cref::try_get_MDEntrySize() const
{
  if ((*this)[9].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::int32_cref>((*this)[9]);
}

inline mfast::int32_mref
MarketData_mref::MDEntries_element_mref::set_MDEntrySize() const
{
  return static_cast<mfast::int32_mref>((*this)[9]);
}

inline
void
MarketData_mref::MDEntries_element_mref::omit_MDEntrySize() const
{
  (*this)[9].omit();
}

inline mfast::uint32_cref
MarketData_cref::MDEntries_element_cref::get_NumberOfOrders() const
{
  return static_cast<mfast::uint32_cref>((*this)[10]);
}

inline mfast::uint32_cref
MarketData_cref::MDEntries_element_cref::try_get_NumberOfOrders() const
{
  if ((*this)[10].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[10]);
}

inline mfast::uint32_mref
MarketData_mref::MDEntries_element_mref::set_NumberOfOrders() const
{
  return static_cast<mfast::uint32_mref>((*this)[10]);
}

inline
void
MarketData_mref::MDEntries_element_mref::omit_NumberOfOrders() const
{
  (*this)[10].omit();
}

inline mfast::ascii_string_cref
MarketData_cref::MDEntries_element_cref::get_TradingSessionID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[11]);
}

inline mfast::ascii_string_cref
MarketData_cref::MDEntries_element_cref::try_get_TradingSessionID() const
{
  if ((*this)[11].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[11]);
}

inline mfast::ascii_string_mref
MarketData_mref::MDEntries_element_mref::set_TradingSessionID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[11]);
}

inline
void
MarketData_mref::MDEntries_element_mref::omit_TradingSessionID() const
{
  (*this)[11].omit();
}

inline mfast::decimal_cref
MarketData_cref::MDEntries_element_cref::get_NetChgPrevDay() const
{
  return static_cast<mfast::decimal_cref>((*this)[12]);
}

inline mfast::decimal_cref
MarketData_cref::MDEntries_element_cref::try_get_NetChgPrevDay() const
{
  if ((*this)[12].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::decimal_cref>((*this)[12]);
}

inline mfast::decimal_mref
MarketData_mref::MDEntries_element_mref::set_NetChgPrevDay() const
{
  return static_cast<mfast::decimal_mref>((*this)[12]);
}

inline
void
MarketData_mref::MDEntries_element_mref::omit_NetChgPrevDay() const
{
  (*this)[12].omit();
}

inline mfast::uint32_cref
MarketData_cref::MDEntries_element_cref::get_TradeVolume() const
{
  return static_cast<mfast::uint32_cref>((*this)[13]);
}

inline mfast::uint32_cref
MarketData_cref::MDEntries_element_cref::try_get_TradeVolume() const
{
  if ((*this)[13].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[13]);
}

inline mfast::uint32_mref
MarketData_mref::MDEntries_element_mref::set_TradeVolume() const
{
  return static_cast<mfast::uint32_mref>((*this)[13]);
}

inline
void
MarketData_mref::MDEntries_element_mref::omit_TradeVolume() const
{
  (*this)[13].omit();
}

inline mfast::ascii_string_cref
MarketData_cref::MDEntries_element_cref::get_TradeCondition() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[14]);
}

inline mfast::ascii_string_cref
MarketData_cref::MDEntries_element_cref::try_get_TradeCondition() const
{
  if ((*this)[14].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[14]);
}

inline mfast::ascii_string_mref
MarketData_mref::MDEntries_element_mref::set_TradeCondition() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[14]);
}

inline
void
MarketData_mref::MDEntries_element_mref::omit_TradeCondition() const
{
  (*this)[14].omit();
}

inline mfast::ascii_string_cref
MarketData_cref::MDEntries_element_cref::get_TickDirection() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[15]);
}

inline mfast::ascii_string_cref
MarketData_cref::MDEntries_element_cref::try_get_TickDirection() const
{
  if ((*this)[15].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[15]);
}

inline mfast::ascii_string_mref
MarketData_mref::MDEntries_element_mref::set_TickDirection() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[15]);
}

inline
void
MarketData_mref::MDEntries_element_mref::omit_TickDirection() const
{
  (*this)[15].omit();
}

inline mfast::ascii_string_cref
MarketData_cref::MDEntries_element_cref::get_QuoteCondition() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[16]);
}

inline mfast::ascii_string_cref
MarketData_cref::MDEntries_element_cref::try_get_QuoteCondition() const
{
  if ((*this)[16].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[16]);
}

inline mfast::ascii_string_mref
MarketData_mref::MDEntries_element_mref::set_QuoteCondition() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[16]);
}

inline
void
MarketData_mref::MDEntries_element_mref::omit_QuoteCondition() const
{
  (*this)[16].omit();
}

inline mfast::uint32_cref
MarketData_cref::MDEntries_element_cref::get_AggressorSide() const
{
  return static_cast<mfast::uint32_cref>((*this)[17]);
}

inline mfast::uint32_cref
MarketData_cref::MDEntries_element_cref::try_get_AggressorSide() const
{
  if ((*this)[17].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[17]);
}

inline mfast::uint32_mref
MarketData_mref::MDEntries_element_mref::set_AggressorSide() const
{
  return static_cast<mfast::uint32_mref>((*this)[17]);
}

inline
void
MarketData_mref::MDEntries_element_mref::omit_AggressorSide() const
{
  (*this)[17].omit();
}

inline mfast::ascii_string_cref
MarketData_cref::MDEntries_element_cref::get_MatchEventIndicator() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[18]);
}

inline mfast::ascii_string_cref
MarketData_cref::MDEntries_element_cref::try_get_MatchEventIndicator() const
{
  if ((*this)[18].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[18]);
}

inline mfast::ascii_string_mref
MarketData_mref::MDEntries_element_mref::set_MatchEventIndicator() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[18]);
}

inline
void
MarketData_mref::MDEntries_element_mref::omit_MatchEventIndicator() const
{
  (*this)[18].omit();
}

inline
QuoteRequest_cref::QuoteRequest_cref()
  : base_type(nullptr, nullptr)
{
}

template <typename T>inline
QuoteRequest_cref::QuoteRequest_cref(
  typename std::enable_if<std::is_same<typename T::cref_type, QuoteRequest_cref>::value, const mfast::value_storage*>::type storage_array,
  const T* instruction)
  : base_type(storage_array, instruction)
{
}

inline
QuoteRequest_cref::QuoteRequest_cref(
  const mfast::message_cref& other)
  : base_type(other)
{
}

inline
QuoteRequest_cref::QuoteRequest_cref(
  const mfast::field_cref& other)
  : base_type(mfast::field_cref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
QuoteRequest_cref::operator mfast::message_cref()
{
  return mfast::message_cref(this->storage(), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void QuoteRequest_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_cref<ascii_string_cref, none_operator_tag, properties_type< 1> > ((*this)[5]) );
  visitor.visit(ext_cref< sequence_cref, ext_cref<uint32_cref, none_operator_tag, properties_type< 0> >, ext_cref< typename RelatedSym_cref::reference, sequence_element_tag,properties_type< 4> > > ((*this)[6]) );
}

inline
QuoteRequest_mref::QuoteRequest_mref()
  : base_type(nullptr, nullptr, nullptr)
{
}

template <typename T>inline
QuoteRequest_mref::QuoteRequest_mref(
  mfast::allocator* alloc,
  typename std::enable_if<std::is_same<typename T::cref_type, QuoteRequest_cref>::value, mfast::value_storage*>::type storage_array,
  const T*          instruction)
  : base_type(alloc, storage_array, instruction)
{
}

inline
QuoteRequest_mref::QuoteRequest_mref(
  const mfast::message_mref& other)
  : base_type(other)
{
}

inline
QuoteRequest_mref::QuoteRequest_mref(
  const mfast::field_mref_base& other)
  : base_type(other.allocator(),
              mfast::field_mref_core_access::storage_of(other)->of_group.content_,
              static_cast<instruction_cptr>(other.instruction()))
{
}

inline
QuoteRequest_mref::operator mfast::message_mref()
{
  return mfast::message_mref(this->allocator(), const_cast<mfast::value_storage*>(this->storage()), static_cast<instruction_cptr>(this->instruction()));
}

template <typename Visitor>
inline void QuoteRequest_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[1]) );
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[2]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[4]) );
  visitor.visit(ext_mref<ascii_string_mref, none_operator_tag, properties_type< 1> > ((*this)[5]) );
  visitor.visit(ext_mref< sequence_mref, ext_mref<uint32_mref, none_operator_tag, properties_type< 0> >, ext_mref< typename RelatedSym_mref::reference, sequence_element_tag,properties_type< 4> > > ((*this)[6]) );
}

inline
QuoteRequest::QuoteRequest(
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
}

inline
QuoteRequest::QuoteRequest(
  const QuoteRequest_cref& other,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data(), other.field_storage(0))
{
}

#ifdef MFAST_JSON_H
QuoteRequest::QuoteRequest(
  const char* json_initializer,
  int json_object_tag_mask,
  mfast::allocator* alloc)
  : base_type(alloc, instruction(), this->data())
{
  std::stringstream strm(json_initializer);
  mfast::json::decode(strm, this->mref(), json_object_tag_mask);
}

#endif
inline QuoteRequest::cref_type
QuoteRequest::ref() const
{
  return QuoteRequest::cref_type(my_storage_.of_group.content_, instruction());
}

inline QuoteRequest::cref_type
QuoteRequest::cref() const
{
  return QuoteRequest::cref_type(my_storage_.of_group.content_, instruction());
}

inline QuoteRequest::mref_type
QuoteRequest::ref()
{
  return QuoteRequest::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline QuoteRequest::mref_type
QuoteRequest::mref()
{
  return QuoteRequest::mref_type(alloc_, my_storage_.of_group.content_, instruction());
}

inline mfast::ascii_string_cref
QuoteRequest_cref::get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
QuoteRequest_cref::try_get_ApplVerID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
QuoteRequest_cref::get_MessageType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
QuoteRequest_cref::try_get_MessageType() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[1]);
}

inline mfast::ascii_string_cref
QuoteRequest_cref::get_SenderCompID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::ascii_string_cref
QuoteRequest_cref::try_get_SenderCompID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[2]);
}

inline mfast::uint32_cref
QuoteRequest_cref::get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[3]);
}

inline mfast::uint32_cref
QuoteRequest_cref::try_get_MsgSeqNum() const
{
  return static_cast<mfast::uint32_cref>((*this)[3]);
}

inline mfast::uint32_mref
QuoteRequest_mref::set_MsgSeqNum() const
{
  return static_cast<mfast::uint32_mref>((*this)[3]);
}

inline mfast::uint32_cref
QuoteRequest_cref::get_SendingTime() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_cref
QuoteRequest_cref::try_get_SendingTime() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_mref
QuoteRequest_mref::set_SendingTime() const
{
  return static_cast<mfast::uint32_mref>((*this)[4]);
}

inline mfast::ascii_string_cref
QuoteRequest_cref::get_QuoteReqID() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[5]);
}

inline mfast::ascii_string_cref
QuoteRequest_cref::try_get_QuoteReqID() const
{
  if ((*this)[5].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::ascii_string_cref>((*this)[5]);
}

inline mfast::ascii_string_mref
QuoteRequest_mref::set_QuoteReqID() const
{
  return static_cast<mfast::ascii_string_mref>((*this)[5]);
}

inline
void
QuoteRequest_mref::omit_QuoteReqID() const
{
  (*this)[5].omit();
}

inline QuoteRequest_cref::RelatedSym_cref
QuoteRequest_cref::get_RelatedSym() const
{
  return static_cast<QuoteRequest_cref::RelatedSym_cref>((*this)[6]);
}

inline QuoteRequest_cref::RelatedSym_cref
QuoteRequest_cref::try_get_RelatedSym() const
{
  return static_cast<QuoteRequest_cref::RelatedSym_cref>((*this)[6]);
}

inline QuoteRequest_mref::RelatedSym_mref
QuoteRequest_mref::set_RelatedSym() const
{
  return static_cast<QuoteRequest_mref::RelatedSym_mref>((*this)[6]);
}

inline
QuoteRequest_cref::RelatedSym_element_cref::RelatedSym_element_cref(
  const mfast::value_storage*   storage,
  QuoteRequest_cref::RelatedSym_element_cref::instruction_cptr instruction)
  : base_type(storage, instruction)
{
}

inline
QuoteRequest_mref::RelatedSym_element_mref::RelatedSym_element_mref(
  mfast::allocator*               alloc,
  mfast::value_storage*         storage,
  QuoteRequest_mref::RelatedSym_element_mref::instruction_cptr instruction)
  : base_type(alloc,storage, instruction)
{
}

template <typename Visitor>
inline void QuoteRequest_cref::RelatedSym_element_cref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_cref<ascii_string_cref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 1> > ((*this)[1]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 3> > ((*this)[2]) );
  visitor.visit(ext_cref<uint64_cref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_cref<uint32_cref, default_operator_tag, properties_type< 2> > ((*this)[4]) );
  visitor.visit(ext_cref<uint32_cref, none_operator_tag, properties_type< 0> > ((*this)[5]) );
  visitor.visit(ext_cref<uint32_cref, constant_operator_tag, properties_type< 2> > ((*this)[6]) );
}

template <typename Visitor>
inline void QuoteRequest_mref::RelatedSym_element_mref::accept(Visitor& visitor)
{
  using namespace mfast;
  visitor.visit(ext_mref<ascii_string_mref, constant_operator_tag, properties_type< 2> > ((*this)[0]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 1> > ((*this)[1]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 3> > ((*this)[2]) );
  visitor.visit(ext_mref<uint64_mref, none_operator_tag, properties_type< 0> > ((*this)[3]) );
  visitor.visit(ext_mref<uint32_mref, default_operator_tag, properties_type< 2> > ((*this)[4]) );
  visitor.visit(ext_mref<uint32_mref, none_operator_tag, properties_type< 0> > ((*this)[5]) );
  visitor.visit(ext_mref<uint32_mref, constant_operator_tag, properties_type< 2> > ((*this)[6]) );
}

inline mfast::ascii_string_cref
QuoteRequest_cref::RelatedSym_element_cref::get_Symbol() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::ascii_string_cref
QuoteRequest_cref::RelatedSym_element_cref::try_get_Symbol() const
{
  return static_cast<mfast::ascii_string_cref>((*this)[0]);
}

inline mfast::uint64_cref
QuoteRequest_cref::RelatedSym_element_cref::get_OrderQty() const
{
  return static_cast<mfast::uint64_cref>((*this)[1]);
}

inline mfast::uint64_cref
QuoteRequest_cref::RelatedSym_element_cref::try_get_OrderQty() const
{
  if ((*this)[1].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint64_cref>((*this)[1]);
}

inline mfast::uint64_mref
QuoteRequest_mref::RelatedSym_element_mref::set_OrderQty() const
{
  return static_cast<mfast::uint64_mref>((*this)[1]);
}

inline
void
QuoteRequest_mref::RelatedSym_element_mref::omit_OrderQty() const
{
  (*this)[1].omit();
}

inline mfast::uint32_cref
QuoteRequest_cref::RelatedSym_element_cref::get_Side() const
{
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_cref
QuoteRequest_cref::RelatedSym_element_cref::try_get_Side() const
{
  if ((*this)[2].absent())
    throw mfast::bad_optional_access();
  return static_cast<mfast::uint32_cref>((*this)[2]);
}

inline mfast::uint32_mref
QuoteRequest_mref::RelatedSym_element_mref::set_Side() const
{
  return static_cast<mfast::uint32_mref>((*this)[2]);
}

inline
void
QuoteRequest_mref::RelatedSym_element_mref::omit_Side() const
{
  (*this)[2].omit();
}

inline mfast::uint64_cref
QuoteRequest_cref::RelatedSym_element_cref::get_TransactTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[3]);
}

inline mfast::uint64_cref
QuoteRequest_cref::RelatedSym_element_cref::try_get_TransactTime() const
{
  return static_cast<mfast::uint64_cref>((*this)[3]);
}

inline mfast::uint64_mref
QuoteRequest_mref::RelatedSym_element_mref::set_TransactTime() const
{
  return static_cast<mfast::uint64_mref>((*this)[3]);
}

inline mfast::uint32_cref
QuoteRequest_cref::RelatedSym_element_cref::get_QuoteType() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_cref
QuoteRequest_cref::RelatedSym_element_cref::try_get_QuoteType() const
{
  return static_cast<mfast::uint32_cref>((*this)[4]);
}

inline mfast::uint32_mref
QuoteRequest_mref::RelatedSym_element_mref::set_QuoteType() const
{
  return static_cast<mfast::uint32_mref>((*this)[4]);
}

inline mfast::uint32_cref
QuoteRequest_cref::RelatedSym_element_cref::get_SecurityID() const
{
  return static_cast<mfast::uint32_cref>((*this)[5]);
}

inline mfast::uint32_cref
QuoteRequest_cref::RelatedSym_element_cref::try_get_SecurityID() const
{
  return static_cast<mfast::uint32_cref>((*this)[5]);
}

inline mfast::uint32_mref
QuoteRequest_mref::RelatedSym_element_mref::set_SecurityID() const
{
  return static_cast<mfast::uint32_mref>((*this)[5]);
}

inline mfast::uint32_cref
QuoteRequest_cref::RelatedSym_element_cref::get_SecurityIDSource() const
{
  return static_cast<mfast::uint32_cref>((*this)[6]);
}

inline mfast::uint32_cref
QuoteRequest_cref::RelatedSym_element_cref::try_get_SecurityIDSource() const
{
  return static_cast<mfast::uint32_cref>((*this)[6]);
}

